<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Aman Bagrecha</title>
    <link>https://amanbagrecha.github.io/post/</link>
      <atom:link href="https://amanbagrecha.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://amanbagrecha.github.io/media/icon_hu34b7b96a7941bf879d4219a76e82104f_4254_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://amanbagrecha.github.io/post/</link>
    </image>
    
    <item>
      <title>Download and preprocess NASA GPM IMERG Data using python and wget</title>
      <link>https://amanbagrecha.github.io/post/xarray/download-and-preprocess-nasa-gpm-imerg-data-using-python-and-wget/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/xarray/download-and-preprocess-nasa-gpm-imerg-data-using-python-and-wget/</guid>
      <description>&lt;p&gt;In this blog post we look into how to download precipitation data from NASA website. I show you two methods, one- directly reading the data using &lt;code&gt;request&lt;/code&gt; module and preprocessing the file using &lt;code&gt;pandas&lt;/code&gt;. Two- To download netCDF file using wget and using &lt;code&gt;xarray&lt;/code&gt; to preprocess and visualise the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We will use xarray to preprocess the data and visualisation. We are going to work with &lt;a href=&#34;https://disc.gsfc.nasa.gov/datasets/GPM_3IMERGHHL_06/summary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree x 0.1 degree V06 (GPM_3IMERGHHL)&lt;/a&gt; data provided by NASA which gives half-hourly precipitation values for entire globe.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;method-1-using-python-to-read-on-the-fly-and-preprocess-the-data&#34;&gt;Method 1: Using python to read on-the-fly and preprocess the data.&lt;/h2&gt;
&lt;h3 id=&#34;let-us-first-look-at-one-file-which-we-need-to-read&#34;&gt;Let us first look at one file which we need to read.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Dataset: 3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5
precipitationCal[0][0], 0, 0, 0
precipitationCal[0][1], 0, 0, 0
precipitationCal[0][2], 0, 0, 0
precipitationCal[0][3], 0, 0, 0
lat, 12.85, 12.95, 13.05
lon, 77.45, 77.55, 77.65, 77.75
time, 1588377600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be seen the first line contains information on satellite, start-time and date, end-time and date. It also lists the sensor on board the satellite.
The second to fifth line lists the values for grid points. When selecting the subset from the NASA website, we choose a bounding box and here we see that we have 12 values: 4 rows and 3 columns. Each value is the centroid of the grid which spans 0.1 by 0.1 degree units. The the &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lon&lt;/code&gt; rows are the centroid position on the map. The last row is the time since launch of the satellite in seconds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: we would need to have authorization in order to make GET request to the API. In google colab you need to first create &lt;code&gt;.netrc&lt;/code&gt; file with credientials &lt;code&gt;machine urs.earthdata.nasa.gov login your_login_username password your_password&lt;/code&gt; stored in the file. Then paste that file inside &lt;code&gt;/root&lt;/code&gt; folder. Only then will you be authorised to fetch the data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We will be using google colab to process and read the file. The format we read in will be ASCII format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from google.colab import files
import pandas as pd
import numpy as np
import datetime
import re
import requests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;our subset.txt file looks like the following.
&lt;img src=&#34;https://i.imgur.com/njlFhPT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;/content/subset.txt&#39;, header=None, sep=&#39;\n&#39;)[0] # dataframe to read the text file which contains all the download links
_df = pd.DataFrame() # dataframe to store the result

for i in range(len(df)):
    url = df[i] # reading the content of the file, line by line
    result = requests.get(url)
    try:
        result.raise_for_status()
        f = result.content.decode(&amp;quot;utf-8&amp;quot;).splitlines() # decode the content recieved and split the line
        date_str = re.findall(&#39;3IMERG.(.*?)-&#39;, f[0])[0] #yyyymmdd use regex to find the date str in `3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5`
        time_str = re.findall(&#39;-S(.*?)-&#39;, f[0])[0] #HHMMSS use regex to find the time str in `3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5`
        date_obj = datetime.datetime.strptime(date_str, &#39;%Y%m%d&#39;).date() # convert the date str to date object
        time_obj = datetime.datetime.strptime(time_str, &#39;%H%M%S&#39;).time() # convert the time str to time object
        l1 = list(map(func1, f)) # map the content of the file by func1 and convert to list  
        l2= list(map(func2, l1[1:4])) # # map the content of the file by func2 and convert to list 
        avg = sum(l2)/len(l2) # take avg of all the resulting precipitation value
        _df.loc[date_obj, time_obj] = avg
    except:
    
        print(&#39;requests.get() returned an error code &#39;+str(result.status_code))

_df.to_csv(&#39;output.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above snippet, we first read the file using request module and decode the content. We use regex to find the match (in our case to find the precipitation value) and convert to date-time objects. Then, we take the average of all the values (precipitation) and store in a new dataframe. This dataframe will be our final product having &lt;code&gt;date_obj&lt;/code&gt; number of rows and &lt;code&gt;time_obj&lt;/code&gt; number of columns. The functions &lt;code&gt;func1&lt;/code&gt; and &lt;code&gt;func2&lt;/code&gt; are used here to calculate the average rainfall in mm/hr for half-hourly period.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we split the string on comma and extract the precipitation value alone
def func1(f):
    return f.split(&#39;,&#39;)[-2:]
# we take the sum of the all the precipitation value which will be later used to take the average across all the ROI
def func2(f):
    return sum(list(map(float, f)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this stage all the files are read and the dataframe can now be exported to csv. Our csv looks like the following.
&lt;img src=&#34;https://i.imgur.com/BcQfaFu.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;method-2-using-wget-to-download-and-then-preprocess-using-xarray-simple-and-easy&#34;&gt;Method 2: Using wget to download and then preprocess using xarray (simple and easy)&lt;/h2&gt;
&lt;p&gt;We first download all files using wget having stored all the urls stored in a text file. These files are then read using xarray which makes it really easy to process and get the information we require. 
We first run shell command inside colab.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;! wget --load-cookies /.urs_cookies --save-cookies /root/.urs_cookies --auth-no-challenge=on --user=your_user_name --ask-password --content-disposition -i &amp;lt;url text file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr
import glob


ds = xr.merge([xr.open_dataset(f) for f in glob.glob(&#39;/content/*.nc4&#39;)]) # merge all the netcdf files into a single xarray dataset
ds1.precipitationCal.mean(dim=(&#39;lon&#39;, &#39;lat&#39;)).plot() # calculate the average precipitation on half-hourly basis.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this stage we have the data preprocessed and is now ready to be used for various modelling and analysis phase.&lt;/p&gt;
&lt;h2 id=&#34;final-comments&#34;&gt;Final Comments&lt;/h2&gt;
&lt;p&gt;In this tech-blog we looked into how to download and preprocess netCDF data provided by &lt;a href=&#34;https://disc.gsfc.nasa.gov/datasets/GPM_3IMERGHHL_06/summary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NASA GES DISC&lt;/a&gt;.
We looked at two methods, one with request and pandas while the other with wget and xarray. All performed on google colab. 
It is to note that, there is setup required i.e, to create a new .netrc file and store inside root directory of colab else it returns an authorisation error. We looked at how easy it is to process netCDF data in xarray and how wget command can be run on colab.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data courtesy: Huffman, G.J., E.F. Stocker, D.T. Bolvin, E.J. Nelkin, Jackson Tan (2019), GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree x 0.1 degree V06, Greenbelt, MD, Goddard Earth Sciences Data and Information Services Center (GES DISC), Accessed: [Data Access Date], 10.5067/GPM/IMERG/3B-HH-L/06&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Validating LULC classes in QGIS</title>
      <link>https://amanbagrecha.github.io/post/qgis/validating-lulc-classes-in-qgis/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/qgis/validating-lulc-classes-in-qgis/</guid>
      <description>&lt;h2 id=&#34;the-problem-statement&#34;&gt;&lt;strong&gt;The problem statement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Any land-use land cover classification needs to be validated with ground-truth data to measure the accuracy. A key single-valued statistic to determine the effectiveness of classification is Cohen’s kappa. This validation metric has been fairly widely used for unbalanced classification as well which expresses a level of agreement between two annotators on a classification problem.&lt;/p&gt;
&lt;p&gt;The objective of this quality assessment was to validate the land cover map performed on June, 2020 sentinel-2 imagery by k-means classification algorithm, thus providing a statistical measure of overall class predictions. The validation was done using an independent set of sample points (~500) generated randomly following stratified random sampling design, to capture the variance within the class&lt;/p&gt;
&lt;p&gt;After running the tool, the sample points were manually assigned to the ground-truth class. The ground-truth dataset was taken to be Bing-satellite imagery as a proxy for field data. Each sample point was labelled by visual inspection on the ground-truth dataset.&lt;/p&gt;
&lt;h2 id=&#34;step-1-classify-image&#34;&gt;&lt;strong&gt;Step 1: Classify Image&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load raster Image&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;K-means clustering for grids&lt;/code&gt; under SAGA tools. Select the raster Image as &lt;code&gt;grid&lt;/code&gt; and in this case we specify 4 classes&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xdx5Tsn.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -K-means clustering on sentinel-2 Image&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;code&gt;Run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;At this stage we have unsupervised k-means clustering output ready &lt;code&gt;(Fig.2)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eW0cOXE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -classification of RR Nagar, Bengaluru. Classes- Forest, Urban, water, Bareland&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-2-convert-to-polygon-vector-format&#34;&gt;&lt;strong&gt;Step 2: Convert to polygon (vector format)&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Polygonize (Raster to Vector)&lt;/code&gt; tool under &lt;code&gt;GDAL&lt;/code&gt;-&amp;gt;&lt;code&gt;Raster Conversion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the classified image as input. Leave everything else as default. The output would be a &lt;code&gt;Vectorised&lt;/code&gt; scratch layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/36nk2tF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.3 -Convert Raster to vector&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the name of the field (&lt;code&gt;DN&lt;/code&gt; here). This will be used later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fix geometries (this step is important here to avoid any error in further steps) &lt;code&gt;Vector Geometry&lt;/code&gt;-&amp;gt;&lt;code&gt;Fix Geometry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gG9gBIc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.4 -Fixing topology issues with &lt;code&gt;Fix Geometry&lt;/code&gt; Toolbox&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-3-dissolve-the-layer-on-dn-field&#34;&gt;&lt;strong&gt;Step 3: Dissolve the layer on DN field&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this step we dissolve the layer based on the &lt;code&gt;DN&lt;/code&gt; value. This will ensure that each polygon can be evaluated based on the land class type which is needed for stratified random sampling.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gm1ihfT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.5 -&lt;code&gt;Dissolve&lt;/code&gt; toolbox to dissolve polygon on &lt;code&gt; DN &lt;/code&gt; value&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure to select dissolve field as &lt;code&gt;DN&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-4-create-stratified-random-samples&#34;&gt;&lt;strong&gt;Step 4: Create stratified random samples&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Go to &lt;code&gt;Vector-&amp;gt;research tools-&amp;gt; Random Points inside Polygon&lt;/code&gt; and set &lt;code&gt;Sampling Strategy&lt;/code&gt; = &lt;code&gt;Points Density&lt;/code&gt; and &lt;code&gt;Point count or density&lt;/code&gt; = &lt;code&gt;0.001&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: The value &lt;code&gt;0.001&lt;/code&gt; signify &lt;code&gt;1&lt;/code&gt; point for &lt;code&gt;1/0.001&lt;/code&gt; m2 of area, given that the units is meters.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1LB6R5L.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.6 - One sample point is generated for each 1000 m2 of area&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-5-extract-raster-values-to-sample-layer&#34;&gt;&lt;strong&gt;Step 5: Extract raster values to sample layer&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We extract the raster value, which is essentially the land cover class for the classified image. We use &lt;code&gt;Sample Raster Values&lt;/code&gt; function here (&lt;code&gt;Fig.7&lt;/code&gt;). The input layer is the random points we generated earlier and the the raster layer is the classified image. The output adds a new column to the sample points layer with the prediction class of the land-cover (&lt;code&gt;Fig.8&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s2RXNOZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.7 -Running &lt;code&gt;Sample Raster Value&lt;/code&gt; to extract Raster values for the input points&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GG9wgNK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.8 -The corresponding Attribute Table with Predicted Class &lt;code&gt; PREDICTED_1&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-6-ground-truth-labelling-using-bing-maps&#34;&gt;&lt;strong&gt;Step 6: Ground Truth Labelling using Bing maps&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At this stage we are ready to validate the image using Bing maps as ground truth. We turn on the edit mode and create new field named Actual class. THen we visually inspect the class on the map and note the land-cover class. Once we inspect all the sample points we can use cohens Kappa statistics to determine the validation result. Alternatively, simply calculating the accuracy would also suffice the need.&lt;/p&gt;
&lt;h2 id=&#34;step-7-add-other-field-to-the-attribute-table-with-reclassification&#34;&gt;&lt;strong&gt;Step 7: Add other field to the attribute table with reclassification&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We can use the &lt;code&gt;Field Calculator&lt;/code&gt; to generate verbose text for each label in our feature class and display labels for the prediction.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- in field calculator to increase verbosity
CASE WHEN PREDICTED_1 is 2 THEN &#39;Urban&#39; 
WHEN PREDICTED_1 is 1 THEN &#39;Bareland&#39;
WHEN PREDICTED_1 is 4 THEN &#39;Forest&#39;
WHEN PREDICTED_1 is 3 THEN &#39;Urban&#39;
END
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3CBAK6X.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.9 -Predicted classes (foreground) vs ground truth (background)&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With this we come to end of the post. Now, validation accuracy can be reported for k-means classification.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geocoding using Mapbox API with Zoom-in map functionality</title>
      <link>https://amanbagrecha.github.io/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/</link>
      <pubDate>Mon, 24 May 2021 20:04:53 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The big picture of this post can be related to google maps, wherein you type the address and it zooms in to the location of interest. We replicate this exact functionality with mapbox API for geocoding and openlayers for client side zoom to the address of interest.&lt;/p&gt;
&lt;h2 id=&#34;main-steps&#34;&gt;Main steps&lt;/h2&gt;
&lt;p&gt;This blog demonstrates how to geocode an address using mapbox api implemented in openlayers v6. Additionally zoom in to the search location as text provided on the search bar.
This one page appication demostrates only key elements, rest of the customisation is at discretion of the viewer.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-project&#34;&gt;Setup the project&lt;/h3&gt;
&lt;p&gt;We first create basic single html file to include all elements (javascript, css and html). Ideally, when the application scales, you would create a seperate file for each component.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;html&lt;/code&gt; file and add basic elements&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
 &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.autocomplete {
  position: relative;
  display: inline-block;
}
input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}
input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}
input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}
 &amp;lt;/style&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
&amp;lt;!--create search bar for geocoding and style it --&amp;gt;
&amp;lt;h2&amp;gt;Autocomplete&amp;lt;/h2&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;form  method=&amp;quot;post&amp;quot; &amp;gt;
  &amp;lt;div class=&amp;quot;autocomplete&amp;quot; style=&amp;quot;width:300px;&amp;quot;&amp;gt;
	&amp;lt;input id=&amp;quot;myInput&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;myCountry&amp;quot; placeholder=&amp;quot;Country&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; id = &amp;quot;geocodingSubmit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;div id=&#39;project_map&#39;, class=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	 
	 // create basemap layer
	 var project_maplayer = new ol.layer.Tile({
	// source: new ol.source.OSM(),
	source: new ol.source.XYZ({
		attributions: [&#39;Powered by Esri&#39;,
									 &#39;Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community&#39;],
		attributionsCollapsible: false,
		url: &#39;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&#39;,
		maxZoom: 23
	}),
	zIndex: 0
});

// create view for the layer
var project_view = new ol.View({
	projection: &#39;EPSG:4326&#39;,
	center: [-81.80808208706726, 27.285095000261222],
	zoom: 7,
});

// add the basemap to the map
var Projectmap = new ol.Map({
	layers: [project_maplayer,],
	target: &#39;project_map&#39;,
	view: project_view,
    constrainOnlyCenter: true,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We added the following elements,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search bar: we setup the search function to input values as address and wrap it within a form with post request.&lt;/li&gt;
&lt;li&gt;Map : the div element with &lt;code&gt;id=&amp;quot;project_map&amp;quot;&lt;/code&gt; holds the map element and the script does the following. First, create layer with ESRI basemap. Second, add the layer to the Map object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this stage the application looks like the following image&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/joNvjw7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-autocomplete-functionality&#34;&gt;Add autocomplete functionality&lt;/h2&gt;
&lt;p&gt;We fetch from the api and populate our top results in a list format on key press. Also, we style the search bar using css.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;style&amp;gt;
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
&amp;lt;/style&amp;gt;

&amp;lt;script&amp;gt;
myHeaders =  {&#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Access-Control-Allow-Credentials&#39; : true,
					&#39;Access-Control-Allow-Origin&#39;:&#39;*&#39;,
					&#39;Accept&#39;: &#39;application/json&#39;}

function autocomplete(inp) {
  /*the autocomplete function takes one argument,
  the text field element*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener(&amp;quot;input&amp;quot;, function(e) {
	  var a, b, i, val = this.value;
	  var ACCESS_TOKEN_KEY = &#39;your_token_here&#39;
	  /*close any already open lists of autocompleted values*/
	  var URL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${val}.json?access_token=${ACCESS_TOKEN_KEY}&amp;amp;types=address,region,poi,country,district,locality,neighborhood,postcode&amp;amp;country=us`
	 
	  fetch(URL,{
		method: &#39;GET&#39;,
		headers: myHeaders,
	  }).then(response =&amp;gt; response.json())
	  .then(data =&amp;gt; {
		geocode_data = data;
		// console.log(data) 
	  
	  closeAllLists();
	  if (!val) { return false;}
	  currentFocus = -1;
	  /*create a DIV element that will contain the items (values):*/
	  a = document.createElement(&amp;quot;DIV&amp;quot;);
	  a.setAttribute(&amp;quot;id&amp;quot;, this.id + &amp;quot;autocomplete-list&amp;quot;);
	  a.setAttribute(&amp;quot;class&amp;quot;, &amp;quot;autocomplete-items&amp;quot;);
	  /*append the DIV element as a child of the autocomplete container:*/
	  this.parentNode.appendChild(a);
	  /*for each item in the array...*/
	  for (i = 0; i &amp;lt; geocode_data.features.length; i++) {

		  b = document.createElement(&amp;quot;DIV&amp;quot;);
		  /*insert a input field that will hold the current array item&#39;s value:*/
		  b.innerHTML += geocode_data.features[i].place_name;
		  b.innerHTML += `&amp;lt;input type=&#39;hidden&#39; style=&amp;quot;display: none;&amp;quot; id=${i}-center-cc  
		  coordinates=&#39;${geocode_data.features[i].center}&#39; value=&#39;${geocode_data.features[i].place_name}&#39;&amp;gt;`;
		  
		  /*execute a function when someone clicks on the item value (DIV element):*/
		  b.addEventListener(&amp;quot;click&amp;quot;, function(e) {
			  /*insert the value for the autocomplete text field:*/
			  var input_tag = this.getElementsByTagName(&amp;quot;input&amp;quot;)[0]
			  inp.value = input_tag.value;
			  inp.setAttribute(&amp;quot;coordinates&amp;quot;, input_tag.getAttribute(&#39;coordinates&#39;));

			  /*close the list of autocompleted values,
			  (or any other open lists of autocompleted values:*/
			  closeAllLists();
		  });
		  a.appendChild(b);
		}

	  })
	  .catch(error =&amp;gt; {
	console.error(&#39;There has been a problem with your fetch operation:&#39;, error);
	});


	  });
  // });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener(&amp;quot;keydown&amp;quot;, function(e) {
	  var x = document.getElementById(this.id + &amp;quot;autocomplete-list&amp;quot;);
	  if (x) x = x.getElementsByTagName(&amp;quot;div&amp;quot;);
	  if (e.keyCode == 40) {
		/*If the arrow DOWN key is pressed,
		increase the currentFocus variable:*/
		currentFocus++;
		/*and and make the current item more visible:*/
		addActive(x);
	  } else if (e.keyCode == 38) { //up
		/*If the arrow UP key is pressed,
		decrease the currentFocus variable:*/
		currentFocus--;
		/*and and make the current item more visible:*/
		addActive(x);
	  } else if (e.keyCode == 13) {
		/*If the ENTER key is pressed, prevent the form from being submitted,*/
		e.preventDefault();
		if (currentFocus &amp;gt; -1) {
		  /*and simulate a click on the &amp;quot;active&amp;quot; item:*/
		  if (x) x[currentFocus].click();
		}
	  }
  });
  function addActive(x) {
	/*a function to classify an item as &amp;quot;active&amp;quot;:*/
	if (!x) return false;
	/*start by removing the &amp;quot;active&amp;quot; class on all items:*/
	removeActive(x);
	if (currentFocus &amp;gt;= x.length) currentFocus = 0;
	if (currentFocus &amp;lt; 0) currentFocus = (x.length - 1);
	/*add class &amp;quot;autocomplete-active&amp;quot;:*/
	x[currentFocus].classList.add(&amp;quot;autocomplete-active&amp;quot;);
  }
  function removeActive(x) {
	/*a function to remove the &amp;quot;active&amp;quot; class from all autocomplete items:*/
	for (var i = 0; i &amp;lt; x.length; i++) {
	  x[i].classList.remove(&amp;quot;autocomplete-active&amp;quot;);
	}
  }
  function closeAllLists(elmnt) {
	/*close all autocomplete lists in the document,
	except the one passed as an argument:*/
	var x = document.getElementsByClassName(&amp;quot;autocomplete-items&amp;quot;);
	for (var i = 0; i &amp;lt; x.length; i++) {
	  if (elmnt != x[i] &amp;amp;&amp;amp; elmnt != inp) {
		x[i].parentNode.removeChild(x[i]);
	  }
	}
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener(&amp;quot;click&amp;quot;, function (e) {
	  closeAllLists(e.target);
  });
}

/*initiate the autocomplete function on the &amp;quot;myInput&amp;quot; element */
autocomplete(document.getElementById(&amp;quot;myInput&amp;quot;));

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following is the explanation of the code&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;autocomplete function: The function takes an element as input which needs to be populated. Then we add an event listner which on change in input field, triggers. A GET request is sent across for the input typed and the result is populated in a form of dropdown. We add some styling on key-down so as to select the search.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, with correct mapbox api access key, we have built the autocomplete functionality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ES8bnSO.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;last-steps&#34;&gt;Last steps&lt;/h2&gt;
&lt;p&gt;We now only need to implement the submit functionality. On click of submit button, the address is located on the map and zoomed in. This is done using a function we call centerMap&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function CenterMap() {
	var [long, lat] = document.getElementById(&amp;quot;myInput&amp;quot;).getAttribute(&amp;quot;coordinates&amp;quot;).split(&amp;quot;,&amp;quot;).map(Number)
    console.log(&amp;quot;Long: &amp;quot; + long + &amp;quot; Lat: &amp;quot; + lat);
    Projectmap.getView().setCenter(ol.proj.transform([long, lat], &#39;EPSG:4326&#39;, &#39;EPSG:4326&#39;));
    Projectmap.getView().setZoom(5);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add the centerMap function on click of submit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.getElementById(&amp;quot;geocodingSubmit&amp;quot;).addEventListener(&#39;click&#39;, function(e){

	e.preventDefault();
	CenterMap()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The associated running application can be found &lt;img src=&#34;https://amanbagrecha.github.io/mapbox-search-functionality/&#34; alt=&#34;here&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Upload Multiple Geotagged Images in Django</title>
      <link>https://amanbagrecha.github.io/post/django/django-image-upload/</link>
      <pubDate>Mon, 24 May 2021 17:25:54 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/post/django/django-image-upload/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post, we look into how to upload multiple geo-tagged/non-geotagged images to aws s3 using plain Django and spatialite as databbase. We use GeoDjango to store the latitude, longitude extracted from geo-tagged images into the database.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;project-setup&#34;&gt;Project setup&lt;/h3&gt;
&lt;p&gt;create django project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;django-admin startproject login_boiler_plate
create app python manage.py startapp GisMap
create superuser python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt; add the app to &lt;code&gt;installed_app&lt;/code&gt; list and setup the default location for media storage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
	...
	&#39;GisMap&#39;,
]

MEDIA_ROOT =  os.path.join(BASE_DIR, &#39;media&#39;) 
MEDIA_URL = &#39;/media/&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-the-database-backend-to-postgis-extenstion-of-postgresql&#34;&gt;&lt;strong&gt;Setup the database backend to postgis extenstion of postgresql.&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# in settings.py file
DATABASES = {
	&#39;default&#39;: {
		 &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.postgis&#39;, #imp
		 &#39;NAME&#39;: &#39;database_name_here&#39;,
		 &#39;USER&#39;: &#39;postgres&#39;,
		&#39;PASSWORD&#39;: &#39;password_here&#39;,
		&#39;HOST&#39;: &#39;localhost&#39;,
		&#39;PORT&#39;: &#39;5432&#39;,
	},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;models.py&lt;/code&gt;, create model for uploading images. &lt;code&gt;DateTimeField&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; are not necessary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.contrib.auth.models import User


class ImageUpload(models.Model):
	user = models.ForeignKey(User, null=True, on_delete=models.CASCADE)
	image = models.ImageField( null=False, blank=False, upload_to = &#39;images/&#39;)
	date_created = models.DateTimeField(auto_now_add=True, null=True)

	def __str__(self):
		return self.user.username + &amp;quot; uploaded: &amp;quot;+ self.image.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;forms.py&lt;/code&gt;, refer to the ImageUpload model for input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  
from django.forms import ModelForm
from django.contrib.auth.models import User
from .models import ImageUpload

class ImageForm(ModelForm):
	class Meta:
		model = ImageUpload
		fields = (&#39;image&#39;,)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;home.html&lt;/code&gt;, create the form to accept image upload.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;                  &amp;lt;!-- Modal --&amp;gt;
                  &amp;lt;form method = &amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
                  &amp;lt;div class=&amp;quot;modal fade&amp;quot; id=&amp;quot;exampleModal&amp;quot; tabindex=&amp;quot;-1&amp;quot; role=&amp;quot;dialog&amp;quot; aria-labelledby=&amp;quot;exampleModalLabel&amp;quot; aria-hidden=&amp;quot;true&amp;quot; &amp;gt;
                    {% csrf_token %}
                    &amp;lt;div class=&amp;quot;modal-dialog&amp;quot; role=&amp;quot;document&amp;quot;&amp;gt;
                      &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
                          &amp;lt;h5 class=&amp;quot;modal-title&amp;quot; id=&amp;quot;exampleModalLabel&amp;quot;&amp;gt;Upload Image&amp;lt;/h5&amp;gt;
                          &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;
                            &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
                          &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
                          {{ image_form.image }}
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
                          &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-secondary&amp;quot; data-dismiss=&amp;quot;modal&amp;quot;&amp;gt;Close&amp;lt;/button&amp;gt;
                          &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Save Image&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                      &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;, accept the HTTP POST request and save to the database. We will alter this to extract latitude, longitude later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@login_required(login_url=&#39;login&#39;)
def home_page(request):

	if request.method == &#39;POST&#39;:
		form = ImageForm(request.POST , request.FILES)
		print(form)
		if form.is_valid():
			print(&amp;quot;is valid&amp;quot;)
			obj = form.save(commit=False)
			obj.user = request.user
			obj.save()
		return redirect(&#39;home&#39;)
	else:
		Imageform = ImageForm()
		return render(request, &amp;quot;GisMap/home.html&amp;quot;, {&#39;Title&#39;: &amp;quot;Home Page&amp;quot;, &amp;quot;image_form&amp;quot;: ImageForm})

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-lat-lon-from-image-meta-deta-exchangeable-image-file-format-exif-&#34;&gt;Get Lat, lon from image meta deta (Exchangeable image file format [EXIF] )&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with &lt;code&gt;django.contrib.gis&lt;/code&gt; to the installed apps.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By default geodjango is not installed in the apps list and thus we do it ourself.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install django-geo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE- ensure os4geo is installed: install from &lt;a href=&#34;https://qgis.org/en/site/forusers/download.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; if not done.  And make the following changes in &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
...
	&#39;django.contrib.gis&#39;,
]



import os
import posixpath
if os.name == &#39;nt&#39;:
	import platform
	OSGEO4W = r&amp;quot;C:\OSGeo4W&amp;quot;
	if &#39;64&#39; in platform.architecture()[0]:
		OSGEO4W += &amp;quot;64&amp;quot;
	assert os.path.isdir(OSGEO4W), &amp;quot;Directory does not exist: &amp;quot; + OSGEO4W
	os.environ[&#39;OSGEO4W_ROOT&#39;] = OSGEO4W
	os.environ[&#39;GDAL_DATA&#39;] = OSGEO4W + r&amp;quot;\share\gdal&amp;quot;
	os.environ[&#39;PROJ_LIB&#39;] = OSGEO4W + r&amp;quot;\share\proj&amp;quot;
	os.environ[&#39;PATH&#39;] = OSGEO4W + r&amp;quot;\bin;&amp;quot; + os.environ[&#39;PATH&#39;]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;models.py&lt;/code&gt;, add a PointField which can store geospatial information (lat,lon)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.gis.db import models
class ImageUpload():
  ...  
  geom = models.PointField( null=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;, define functions to extract meta data from image and convert into right format for GeoDjango to understand it. Courtesy of &lt;a href=&#34;https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jayson DeLancey&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#



from PIL import Image
from urllib.request import urlopen
from PIL.ExifTags import GPSTAGS
from PIL.ExifTags import TAGS

def get_decimal_from_dms(dms, ref):

	degrees = dms[0]
	minutes = dms[1] / 60.0
	seconds = dms[2] / 3600.0

	if ref in [&#39;S&#39;, &#39;W&#39;]:
		degrees = -degrees
		minutes = -minutes
		seconds = -seconds

	return round(degrees + minutes + seconds, 5)

def get_coordinates(geotags):
	lat = get_decimal_from_dms(geotags[&#39;GPSLatitude&#39;], geotags[&#39;GPSLatitudeRef&#39;])

	lon = get_decimal_from_dms(geotags[&#39;GPSLongitude&#39;], geotags[&#39;GPSLongitudeRef&#39;])

	return (lon, lat)



def get_geotagging(exif):
	if not exif:
		raise ValueError(&amp;quot;No EXIF metadata found&amp;quot;)

	geotagging = {}
	for (idx, tag) in TAGS.items():
		if tag == &#39;GPSInfo&#39;:
			if idx not in exif:
				raise ValueError(&amp;quot;No EXIF geotagging found&amp;quot;)

			for (key, val) in GPSTAGS.items():
				if key in exif[idx]:
					geotagging[val] = exif[idx][key]

	return geotagging

#_______________________________________________________________________________________________________________________________________#


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;, update home_page function to extract meta data and save the image to database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.gis.geos import Point

@login_required(login_url=&#39;login&#39;)
def home_page(request):
    if request.method == &amp;quot;POST&amp;quot;:
        form = ImageForm(request.POST, request.FILES)
        img = Image.open(request.FILES.get(&amp;quot;image&amp;quot;))
        if form.is_valid():
            try:
                obj = form.save(commit=False)
                obj.user = request.user
                obj.image_url = obj.image.url
                geotags = get_geotagging(img._getexif())
                obj.geom = Point(
                    get_coordinates(geotags)
                )  # X is longitude, Y is latitude, Point(X,Y)
                obj.save()
                messages.success(request, f&amp;quot;image uploaded succesfully&amp;quot;)
            except ValueError as e:
                messages.warning(request, e)
        else:
            messages.warning(request, f&amp;quot;Invalid image type&amp;quot;)
        return redirect(&amp;quot;home&amp;quot;)
    else:
        Imageform = ImageForm()
        return render(
            request, &amp;quot;GisMap/home.html&amp;quot;, {&amp;quot;Title&amp;quot;: &amp;quot;Home Page&amp;quot;, &amp;quot;image_form&amp;quot;: ImageForm}
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;upload-to-s3-bucket&#34;&gt;Upload to S3 bucket&lt;/h2&gt;
&lt;p&gt;Install boto3 package and django-storages. Add to installed packages. Additionally, provide Key:Value AWS credentials to access the bucket and change the default file storage to S3.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install django-storages
pip install boto3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
	...
	&#39;storages&#39;,
]

AWS_ACCESS_KEY_ID = &amp;quot;&amp;quot;
AWS_SECRET_ACCESS_KEY = &amp;quot;&amp;quot;
AWS_STORAGE_BUCKET_NAME = &amp;quot;&amp;quot;

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = &#39;storages.backends.s3boto3.S3Boto3Storage&#39;

AWS_QUERYSTRING_AUTH = False // removes the query string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Make the bucket public to be able to make HTTP request&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provide policy to make our s3 bucket public. By default, the bucket is private and no read/wrtie access is provided for user from outside the s3 page. There are other ways to access private bucket by either Limiting access to specific IP addresses or Restricting access to a specific HTTP referer. For simplicity we make the bucket public.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Version&amp;quot;:&amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;:[
    {
      &amp;quot;Sid&amp;quot;:&amp;quot;PublicRead&amp;quot;,
      &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
      &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Action&amp;quot;:[&amp;quot;s3:GetObject&amp;quot;,&amp;quot;s3:GetObjectVersion&amp;quot;],
      &amp;quot;Resource&amp;quot;:[&amp;quot;arn:aws:s3:::DOC-EXAMPLE-BUCKET/*&amp;quot;]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;accept-non-geotagged-images&#34;&gt;Accept non-geotagged images&lt;/h2&gt;
&lt;p&gt;At this point, we should be able to upload geotagged images to s3 bucket. Non-geotagged images are not yet accepted by the model and thus we create seperate model for it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/34006994/how-to-upload-multiple-images-to-a-blog-post-in-django&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Additional resource&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We now make separate model for accepting non-geotagged images similar to &lt;code&gt;ImageUpload&lt;/code&gt; model but without &lt;code&gt;PointField&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Photos(models.Model):

	user = models.ForeignKey(User, null=True, on_delete=models.CASCADE)
	image = models.ImageField(upload_to=&#39;photos/&#39;,null=True,blank=False)
	date_created = models.DateTimeField(auto_now_add=True, null=True)
	image_url = models.URLField(max_length=250, null=True, blank=False)

	class Meta:
		verbose_name = &#39;Photo&#39;
		verbose_name_plural = &#39;Photos&#39;

	def __str__(self):
		return self.user.username + &amp;quot; uploaded image &amp;quot;+ self.image.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt; file, extend the home_page function to add a fallback for non-geotagged images.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if request.method == &amp;quot;POST&amp;quot;:

    # images will be in request.FILES
    post_request, files_request = request.POST, request.FILES

    form = PhotoForm(post_request or None, files_request or None)
    files = request.FILES.getlist(
        &amp;quot;images&amp;quot;
    )  # returns files: [&amp;lt;InMemoryUploadedFile: Image_name.jpg (image/jpeg)&amp;gt;, &amp;lt;InMemoryUploadedFile: Image_name.jpg (image/jpeg)&amp;gt;]
    if form.is_valid():
        user = request.user
        for f in files:

            # returns &amp;lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x1ED0CCC6280&amp;gt;
            img = Image.open(f)  
            
            try:
                geotags = get_geotagging(img._getexif())
                geoimage = ImageUpload(user=user, image=f)
                geoimageimg_upload.image_url = geoimage.image.url
                # X is longitude, Y is latitude, Point(X,Y) ; returns eg SRID=4326;POINT (11.88454 43.46708)
                geoimage.geom = Point(get_coordinates(geotags))
                geoimage.save()
            except:
                nongeoimage = Photos(user=user, image=f)
                nongeoimage.image_url = nongeoimage.image.url
                nongeoimage.save()
    else:
        print(&amp;quot;Form invalid&amp;quot;)
    return redirect(&amp;quot;home&amp;quot;)
else:
    Imageform = PhotoForm()
    return render(
        request, &amp;quot;GisMap/home.html&amp;quot;, {&amp;quot;Title&amp;quot;: &amp;quot;Home Page&amp;quot;, &amp;quot;image_form&amp;quot;: ImageForm}
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;accept-multiple-images&#34;&gt;Accept multiple images&lt;/h2&gt;
&lt;p&gt;Make a new form which accepts multiple image files to be uploaded at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class PhotoForm(forms.ModelForm):
	images = forms.FileField(widget=forms.ClearableFileInput(attrs={&#39;multiple&#39;: True}))

	class Meta:
		model = Photos
		fields = (&#39;images&#39;,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;home.html&lt;/code&gt;, add &lt;code&gt;multiple&lt;/code&gt; attribute to allow for multiple selection of images at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;				&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
				&amp;lt;label for=&amp;quot;note-image&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
				&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;images&amp;quot; class=&amp;quot;form-control-file&amp;quot; id=&amp;quot;note-image&amp;quot; multiple&amp;gt;
				&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;final-note&#34;&gt;Final Note:&lt;/h2&gt;
&lt;p&gt;At this point, you should be able to upload multiple Images to the AWS S3 bucket and have coordinates extracted the geo-tagged images and segregate non-geotagged images.&lt;/p&gt;
&lt;p&gt;You learnt-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to Setup GeoDjango&lt;/li&gt;
&lt;li&gt;How to Setup AWS S3 bucket&lt;/li&gt;
&lt;li&gt;How to Extract meta data from Image and store in database using PointField&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to visualise the data.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Django rest framework PDF creation and email via gmail SMTP and reportLab</title>
      <link>https://amanbagrecha.github.io/post/django/pdf-and-email-creation/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/django/pdf-and-email-creation/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Ever wanted to send email with attachements that too in django? And have the attachments created from the user input? This post tries to solve exactly that.&lt;/p&gt;
&lt;h2 id=&#34;main-steps&#34;&gt;Main steps&lt;/h2&gt;
&lt;p&gt;In this blog we create PDF using &lt;code&gt;Report Lab&lt;/code&gt; and email it to the user using gmail SMTP service. All actions are performed in Django.&lt;/p&gt;
&lt;h2 id=&#34;step-1--create-django-view-to-serialize-data&#34;&gt;Step 1 : create django view to serialize data&lt;/h2&gt;
&lt;p&gt;To begin with, we create a view &lt;code&gt;CreatePDF&lt;/code&gt; which accepts &lt;code&gt;POST&lt;/code&gt; request and the data gets passed onto &lt;code&gt;CreatePDFSerializer&lt;/code&gt; which serializes our data and validates it. If our data is valid, we generate PDF using &lt;code&gt;generate_pdf&lt;/code&gt; function and email to the recipent (&lt;code&gt;emailaddress&lt;/code&gt; of the users) using the &lt;code&gt;sendPDF&lt;/code&gt; function. If everything does not execute properly, we return an error response else a success.&lt;/p&gt;
&lt;p&gt;The local variable &lt;code&gt;myresponse&lt;/code&gt; is a dictionary which helps us manage the response for each &lt;code&gt;return&lt;/code&gt; statement in the correct format as expected by &lt;code&gt;response&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
SUCCESS = &#39;success&#39;
ERROR = &#39;error&#39;
message_list = [&#39;response&#39;, &#39;status&#39;, &#39;message&#39;] # eg: [&amp;quot;success&amp;quot;, 201, &amp;quot;successfully upload the file&amp;quot;]

@csrf_exempt
@api_view([&#39;POST&#39;,])
def CreatePDF(request):
    myresponse = {k: [] for k in message_list}

    try:
        myData = request.data
        # serialier the data
        serializer = serializers.CreatePDFSerializer(data=myData)  
        if serializer.is_valid():
            try:
                sendPDF(**myData.dict())  # create pdf and send email
            except Exception as e:
                RequestResponse(
                    myresponse,
                    ERROR,
                    status.HTTP_400_BAD_REQUEST,
                    {&amp;quot;Email&amp;quot;: [&amp;quot;Could not send mail!&amp;quot;]},
                )
                return Response(data=myresponse)
            
            account = serializer.save()
            RequestResponse(
                myresponse,
                SUCCESS,
                status.HTTP_201_CREATED,
                {&amp;quot;Success&amp;quot;: [f&amp;quot;Inspection Report e-mailed to {account.EmailAddress}!&amp;quot;]},
            )
            return Response(data=myresponse)

        RequestResponse(
            myresponse, ERROR, status.HTTP_400_BAD_REQUEST, serializer.errors
        )
        return Response(data=myresponse)
    
    except Exception as e:
        print(e)
        RequestResponse(
            myresponse,
            ERROR,
            status.HTTP_500_INTERNAL_SERVER_ERROR,
            {&amp;quot;Error&amp;quot;: [&amp;quot;Internal Server Error&amp;quot;]},
        )
        return Response(data=myresponse)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-2-generate-pdf-using-report-lab&#34;&gt;step 2: Generate PDF using Report Lab&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt; we create a function to generate pdf using &lt;code&gt;Report Lab&lt;/code&gt; package. This allows us to define the page size and line strings with text placement to be included.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def generate_pdf(**Mydata):
    y = 700
    buffer = io.BytesIO()  # in memory create pdf
    p = canvas.Canvas(buffer, pagesize=letter)
    p.setFont(&#39;Helvetica&#39;, 14)
    p.drawString(220, y, Mydata[&#39;Title&#39;])
    p.drawString(450, y, &#39;Date:&#39; + timezone.now().strftime(&#39;%Y-%b-%d&#39;))
    p.line(30, 675, 550, 675)
    p.drawString(220, y - 300, &#39;Time&#39;
                 + str(Mydata[&#39;time&#39;]))
    p.showPage()
    p.save()
    pdf = buffer.getvalue()
    buffer.close()
    return pdf

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-3-send-email-via-smtp-backend&#34;&gt;step 3: Send Email via SMTP backend&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;, we create &lt;code&gt;sendPDF&lt;/code&gt; function which calls the &lt;code&gt;generate_pdf&lt;/code&gt;to generate PDF and attaches the pdf to the email using the &lt;code&gt;EmailMessage&lt;/code&gt; class method &lt;code&gt;attach&lt;/code&gt;. We additionally need to setup backend for smtp service and host user which is to be done in &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# views.py
def sendPDF(**Mydata):
	pdf = generate_pdf(**Mydata)
	msg = EmailMessage(Mydata[&#39;Title&#39;], &amp;quot; Your Report is ready! &amp;quot;, settings.EMAIL_HOST_USER, to=[Mydata[&#39;EmailAddress&#39;]])
	msg.attach(f&amp;quot;{Mydata[&#39;Title&#39;]}.pdf&amp;quot;, pdf, &#39;application/pdf&#39;)
	msg.content_subtype = &amp;quot;html&amp;quot;
	resp = msg.send()
	print(&amp;quot;resp:&amp;quot; , resp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
EMAIL_BACKEND = &#39;django.core.mail.backends.smtp.EmailBackend&#39;
EMAIL_HOST = &amp;quot;smtp.gmail.com&amp;quot;
EMAIL_HOST_USER = &#39;your_email@gmail.com&#39;
EMAIL_HOST_PASSWORD = &#39;your_password&#39;
EMAIL_PORT = 587
EMAIL_USE_TLS = True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we have been able to successfully setup and send email with attachment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polygon Selection and  Area Calculation in Openlayers</title>
      <link>https://amanbagrecha.github.io/post/openlayers/polygon-selection-and-area-calculation-in-openlayers/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/openlayers/polygon-selection-and-area-calculation-in-openlayers/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this small demo-blog we look into how to make polygon selections on the map and calculate the area of that polygon on-the-fly. We use openlayers v6 for client side and geoserver to save our vector layers for this exercise.&lt;br&gt;
I assume readers to have familiarity with setting up geoserver and basics of openlayers.&lt;/p&gt;
&lt;h2 id=&#34;step-1-setup-openlayers&#34;&gt;&lt;strong&gt;Step 1: Setup openlayers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Openlayers requires you to add these cdns to add their functionality into our application.&lt;/p&gt;
&lt;h3 id=&#34;link-necessary-cdns&#34;&gt;link necessary cdns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
 &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using openlayers to render the request response. since the output of the WFS request is json, we create a new layer with vector source and format as geojson. 
The &lt;code&gt;strategy:ol.loadingstrategy.bbox&lt;/code&gt; tells openlayers to only load features within the bbox. Simply put, if we move to different location, only features within that bbox will appear.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// setup geoserver port
var geoserver_ip = &#39;http://120.0.0.1&#39;
var geoserver_port = &#39;8080&#39;

// define vector source
var myFlSource = new ol.source.Vector({
	format: new ol.format.GeoJSON(),
		url: function (extent){
			return ( geoserver_ip +&#39;:&#39; + geoserver_port + &#39;/geoserver/dronnav/ows?service=WFS&amp;amp;version=1.1.0&amp;amp;request=GetFeature&amp;amp;typeName=dronnav%3Aflorida_bp&amp;amp;maxFeatures=10000&amp;amp;outputFormat=application/json&amp;amp;srsname=EPSG:4326&amp;amp;&#39; + &#39;bbox=&#39; + extent.join(&#39;,&#39;) + &#39;,EPSG:4326&#39; );
		},
		strategy:ol.loadingstrategy.bbox,
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We perform WFS request from geoserver to get our layer &lt;code&gt;florida_bp&lt;/code&gt; in this case. The parameters are as explained as follows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;service=WFS&lt;/code&gt; : web feature service to perform interaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;typename=workspace:florida_bp&lt;/code&gt; : specify the workspace and layer name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;version=1.1.0&lt;/code&gt; : version number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;maxFeatures = 10000&lt;/code&gt; : since WFS request is computationaly expensive, we restrict to only load 10000 features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;request=GetFeature&lt;/code&gt; : request type. There are several other which can be found here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;outputFormat=application/json&lt;/code&gt; : the output format as response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;srsname=EPSG:4326&lt;/code&gt; : coordinate reference system to display on the map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bbox=&lt;/code&gt; : bounding box&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// define vector layer
var floridaLayer = new ol.layer.Vector({
	source: myFlSource,
	style: new ol.style.Style({
		fill: new ol.style.Fill({
			color: &#39;rgba(1, 1, 255, .2)&#39;,
			}),
		stroke: new ol.style.Stroke({
			color: &#39;rgba(1, 1, 255, .5)&#39;,
			width: 2,
		}),
		}),
		minZoom: 16, // this will allows us to send request only when the zoom is atleast 16
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the layer is defined, we need to add this layer to the map. We can either use &lt;code&gt;map.addLayer(layername)&lt;/code&gt; or add to array in the map (&lt;code&gt;Fig.1&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add ESRI basemap
var project_maplayer =    new ol.layer.Tile({
	source: new ol.source.XYZ({
		attributions: [&#39;Powered by Esri&#39;,
										&#39;Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community&#39;],
		attributionsCollapsible: false,
		url: &#39;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&#39;,
		maxZoom: 23
	}),
	zIndex: 0
});

// add view with projection set to EPSG 4326 for the map
var project_view = new ol.View({
	projection: &#39;EPSG:4326&#39;,
	center: [-81.80808208706726, 27.285095000261222],
	zoom: 7,
});

// define the map with all the layers created previously
var Projectmap = new ol.Map({
	layers: [project_maplayer, floridaLayer],
	overlays: [overlay],
	target: &#39;project_map&#39;, // the div element `id` in html page
	view: project_view,
});
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jodNbPQ.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -The Map layer with building footprints (&lt;code&gt;floridaLayer&lt;/code&gt;) added to the map with the style we specified&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;get-feature-info-on-click&#34;&gt;&lt;strong&gt;Get feature info on click&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After adding basemap and our layer to the map served via geoserver, we are now ready to get information &lt;code&gt;on-click&lt;/code&gt;. We use  &lt;code&gt;forEachFeatureAtPixel&lt;/code&gt; method on our layer to send a WFS request to our geoserver and recive a response in json format. We change the style of the building on click (&lt;code&gt;Fig.2&lt;/code&gt;). The area is calculated using formatArea function which utilises &lt;code&gt;ol.sphere.getArea&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; method to calculate area and change CRS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
  /*  select ploygon the feature and get area and store the features */
  var selected = []; // contains all features
  var selected_area = []; // contains area of feature, one-to-one
  
  Projectmap.on(&#39;singleclick&#39;, function (e) {
  Projectmap.forEachFeatureAtPixel(e.pixel, function (f, l) {
  	var mycoordinate = e.coordinate
  	storef = f  // feature
  	/* if click is on polygon, then select the feature */
  if ( f.getGeometry()   instanceof  ol.geom.MultiPolygon ) {
		  
		var selIndex = selected.indexOf(f);
			// console.log(selIndex)
		if (selIndex &amp;lt; 0) {
			selected.push(f);
			selected_area.push( formatArea(f) ); // formatArea function returns the area in ft2
			f.setStyle(highlightStyle); // change style on click
		} else {
			selected.splice(selIndex, 1);
			selected_area.splice( selIndex, 1);
			f.setStyle(undefined);
		}
 	 }

	  })

	  /* update the tags with no of selected feature and total area combined */
	  document.getElementById(&#39;status-selected&#39;).innerHTML = &#39;&amp;amp;nbsp;&#39; + selected.length + &#39; selected features&#39;;
	  document.getElementById(&#39;status-selected_area&#39;).innerHTML = &#39;&amp;amp;nbsp;&#39; + selected_area.reduce(getSum, 0) + &#39; ft&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;&#39;;
	  
	});
	

	
  /* style for selected feature on click  */
  var highlightStyle = new ol.style.Style({
  	fill: new ol.style.Fill({
  	color: &#39;#f0b88b&#39;,
  	}),
  	stroke: new ol.style.Stroke({
  	color: &#39;#f0b88b&#39;,
  	width: 3,
  	}),
  });


  /*  function for calculating area of the polygon (feature) selected */
  function formatArea (polygon){
   var area = ol.sphere.getArea(polygon.getGeometry().transform(&#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)); // transform to projected coordinate system.
   var output;
   output = Math.round(area * 100*10.7639) / 100  ; //in ft2
   polygon.getGeometry().transform(&#39;EPSG:3857&#39;, &#39;EPSG:4326&#39; ) //convert back to geographic crc
   return output;
  }
  
  /*  function for array sum */
  function getSum(total, num) {
  return total + Math.round(num);
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TCicCHu.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -The &lt;code&gt;floridaLayer&lt;/code&gt; building footprints selected  with the style we specified&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;final-comments&#34;&gt;&lt;strong&gt;Final comments&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post demonstrates the use of &lt;code&gt;strategy:ol.loadingstrategy.bbox&lt;/code&gt; to load only the features that cover the bounding box. We use this strategy since WFS service is resouce intensive and our server cannot handle millions of HTTP request at once.&lt;/p&gt;
&lt;p&gt;We also see the use of &lt;code&gt;forEachFeatureAtPixel&lt;/code&gt; method to select our building footprints. On click of the feature we change the style using &lt;code&gt;setStyle&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Additionally, we saw how to change projection on-the-fly using &lt;code&gt;ol.sphere.getArea&lt;/code&gt; method. A word of caution while using &lt;code&gt;EPSG:3857&lt;/code&gt;. My AOI was on the equator and thus calculating area does not result in significant error. But if the AOI is in temperate zone then adopt suitable projection CRS.&lt;/p&gt;
&lt;p&gt;Layer Credit: Microsoft buidling footprints &lt;a href=&#34;https://github.com/microsoft/USBuildingFootprints&#34;&gt;https://github.com/microsoft/USBuildingFootprints&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Full Fledged CRUD application using DRF and Token Authentication</title>
      <link>https://amanbagrecha.github.io/post/django/crud-in-django-rest-framework/</link>
      <pubDate>Sat, 22 May 2021 15:13:58 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/post/django/crud-in-django-rest-framework/</guid>
      <description>&lt;hr style=&#34;border:1px solid lightgray&#34;&gt; &lt;/hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;what-will-you-learn&#34;&gt;What will you learn&lt;/h2&gt;
&lt;p&gt;&lt;span style=&#34;color: grey;font-size: 18px;&#34;&gt;Too Long; Didn&amp;rsquo;t Read &lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;Less&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DRF&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Create API end points for CRUD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Token Authentication&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Add security and authorised access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fetch API calls&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Consume API from front-end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Password Reset&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Send email to reset your forgotton password&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-step-one--basic-django-project-setup&#34;&gt;1. Step one : Basic Django Project setup&lt;/h2&gt;
&lt;p&gt;Create virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda create --name djangoEnv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Activate the environment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda activate djangoEnv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, in your command line&lt;/p&gt;
&lt;p&gt;create project &lt;code&gt;django-admin startproject tutorial&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;create app &lt;code&gt;python manage.py startapp Accountsapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;create superuser &lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the project and app installed your structure should look like this (insert picture here)&lt;/p&gt;
&lt;p&gt;Register the app in  file as follows&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Installed_apps = [ 
    &#39;Accountsapp.apps.AccountsappConfig&#39;,
    ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now create our own custom model named &lt;em&gt;&lt;strong&gt;MyAccounts&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;models.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token


class MyAccountManager(BaseUserManager):
	def create_user(self, email, username, password=None):
		if not email:
			raise ValueError(&#39;Users must have an email address&#39;)
		if not username:
			raise ValueError(&#39;Users must have a username&#39;)


		user = self.model(
			email=self.normalize_email(email),
			username=username,
		)

		user.set_password(password)
		user.save(using=self._db)
		return user

	def create_superuser(self, email, username, password):
		user = self.create_user(
			email=self.normalize_email(email),
			password=password,
			username=username,
			
		)
		user.is_admin = True
		user.is_staff = True
		user.is_superuser = True
		user.save(using=self._db)
		return user

# creating custom model of &amp;quot;User&amp;quot; base model. 
class MyAccount(AbstractBaseUser):
	email 					= models.EmailField(verbose_name=&amp;quot;email&amp;quot;, max_length=60, unique=True)
	username 				= models.CharField(max_length=30, unique=True)
	date_joined				= models.DateTimeField(verbose_name=&#39;date joined&#39;, auto_now_add=True)
	last_login				= models.DateTimeField(verbose_name=&#39;last login&#39;, auto_now=True)
	is_admin				= models.BooleanField(default=False)
	is_active				= models.BooleanField(default=True)
	is_staff				= models.BooleanField(default=False)
	is_superuser			= models.BooleanField(default=False)


	USERNAME_FIELD = &#39;email&#39;   # username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.

	REQUIRED_FIELDS = [&#39;username&#39;] 

	objects = MyAccountManager()

	def __str__(self):
		return self.email

	# For checking permissions. to keep it simple all admin have ALL permissons
	def has_perm(self, perm, obj=None):
		return self.is_admin

	# Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)
	def has_module_perms(self, app_label):
		return True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To tell django we are overwriting the default user model, we do the following&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AUTH_USER_MODEL = Accounts.MyAccounts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we makemigrates to register the model in our database&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for the model to be visible in admin section we do the following&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;admin.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin
from .models import MyAccount

admin.site.register(MyAccount) # Register your models here.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now the our project is setup. We move to Django Rest Framework setup&lt;/p&gt;
&lt;h2 id=&#34;2-setup-django-rest-framework-with-authentication&#34;&gt;2. Setup Django Rest Framework with Authentication&lt;/h2&gt;
&lt;p&gt;Install dependeny&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install djangorestframework
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like any other app, django rest framework is also an app. so we add it to the list of installed apps. 
We additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
    # my apps
    &#39;Accountsapp.apps.AccountsappConfig&#39;,
    # restframework
    &#39;rest_framework&#39;,
    &#39;rest_framework.authtoken&#39;,
    ...
    
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to be using Token Authentication in this application. DRF documentation recommends it as the default. 
Let Us setup the Default authentication class before actually utilising it.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;REST_FRAMEWORK = {
    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [
        &#39;rest_framework.authentication.TokenAuthentication&#39;,
        
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing before we actually start writing code is to perform migration. The &lt;code&gt;rest_framework.authtoken&lt;/code&gt; app provides Django database migrations.&lt;/p&gt;
&lt;p&gt;As done previously on command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have completed the logistics for setting up DRF&lt;/p&gt;
&lt;h2 id=&#34;3-building-crud-application&#34;&gt;3. Building CRUD application&lt;/h2&gt;
&lt;p&gt;We would first create a folder called &lt;strong&gt;api&lt;/strong&gt; inside our to seperate codebase for API and vanila CRUD&lt;/p&gt;
&lt;p&gt;Inside API folder create four files,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serializers.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;code&gt;serializers.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rest_framework import serializers 
from Accountsapp.models import MyAccount # import our custom model


# provide fields in meta, expression and in MyAccount. for admin page login and edit,  is_admin and is_staff should be true
class RegistrationSerializer(serializers.ModelSerializer):

    # additional fields 
	password2 = serializers.CharField(style={&#39;input_type&#39;: &#39;password&#39;}, write_only=True)
	is_superuser =serializers.BooleanField(write_only=True)
	
    class Meta:
		model = MyAccount
        # mention the fields you want to display when request is sent. 
		fields = [&#39;id&#39;,&#39;email&#39;, &#39;username&#39;, &#39;password&#39;, &#39;password2&#39;,  &#39;is_superuser&#39;]
		extra_kwargs = {
				&#39;password&#39;: {&#39;write_only&#39;: True},  # tells django to not display the password for others to see
		}	


	def	save(self):

		account = MyAccount(
					email=self.validated_data[&#39;email&#39;],
					username=self.validated_data[&#39;username&#39;],
					# is_admin=self.validated_data[&#39;is_admin&#39;],
					is_superuser= self.validated_data[&#39;is_superuser&#39;],
				)
		password = self.validated_data[&#39;password&#39;]
		password2 = self.validated_data[&#39;password2&#39;]
		if password != password2:
			raise serializers.ValidationError({&#39;password&#39;: &#39;Passwords must match.&#39;})
		account.set_password(password)
		account.save()
		return account


class UpdateSerializer(serializers.ModelSerializer):

	class Meta:
		model = MyAccount
		# mention the fields you want to display when request is sent. 
		fields = [&#39;id&#39;, &#39;username&#39;, &#39;email&#39;]
		extra_kwargs = {
				&#39;password&#39;: {&#39;read_only&#39;: True},  #  password cannot be edited from here
		}


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Do not try to update the password from serializers. There is another technique which we will deal with in later section.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rest_framework import status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.contrib.auth import authenticate
from rest_framework.authentication import TokenAuthentication
from rest_framework.decorators import api_view, authentication_classes, permission_classes

from . import serializers 
from Accountsapp.models import MyAccount
from rest_framework.authtoken.models import Token

# user views
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.parsers import JSONParser
from django.core.exceptions import ObjectDoesNotExist
import json

# login {built-in django}
from django.contrib.auth import login 
from django.contrib.auth.decorators import login_required



# get all users
@api_view([&amp;quot;GET&amp;quot;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def get_users(request):
    try:
        user_profile = MyAccount.objects.all() 
        serializer = serializers.RegistrationSerializer(user_profile, many=True)
        return Response( {&#39;USER_PROFILE&#39;:serializer.data}, status= status.HTTP_200_OK)
    except ObjectDoesNotExist:
        return JsonResponse({&#39;Response&#39;: &#39;You do not have authorization to access this page&#39;}, status=status.HTTP_401_UNAUTHORIZED)



# get given user
@api_view([&#39;GET&#39;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def get_given_user(request, pk):
    try:
        user_profile = MyAccount.objects.get(pk=pk)
    except ObjectDoesNotExist:
        return JsonResponse({&amp;quot;missing&amp;quot;: &amp;quot;The requested object does not exist&amp;quot;}, status=status.HTTP_404_NOT_FOUND)

    if request.method == &#39;GET&#39;:  
        serializer = serializers.RegistrationSerializer(user_profile)
        token = Token.objects.get(user=user_profile).key
        return JsonResponse({&#39;given_user_profile&#39;: serializer.data, &#39;token&#39;:token})
   


# add user
@csrf_exempt
@api_view([&#39;POST&#39;])
def user_add_view(request):
        serializer = serializers.RegistrationSerializer( data=request.data)
        if serializer.is_valid():
            account = serializer.save()
            token, _ = Token.objects.get_or_create(user=account)
            return Response(serializer.data, status=status.HTTP_201_CREATED,  headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



# update user
@api_view([&amp;quot;PUT&amp;quot;,&#39;GET&#39;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def update_user(request, pk):

    try:
        user_profile = MyAccount.objects.get(id=pk)
    except ObjectDoesNotExist:
        return Response({&#39;response&#39;: &amp;quot;given object does not exist&amp;quot;}, status=status.HTTP_404_NOT_FOUND)

    user = request.user
    try:
        data =  {i:j for i,j in request.query_params.items()}
        print(data)
        serializer = serializers.UpdateSerializer(user_profile, data=data)
        if serializer.is_valid():
            user= serializer.save()
            token, _ = Token.objects.get_or_create(user=user)
            return Response({&amp;quot;response&amp;quot;: &amp;quot;success&amp;quot;, &#39;data&#39; :serializer.data}, status=status.HTTP_201_CREATED,  headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    except ObjectDoesNotExist as e:
        return JsonResponse({&#39;error&#39;: str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)
    except Exception:
        return JsonResponse({&#39;error&#39;: &#39;Something terrible went wrong&#39;}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



# delete user
@api_view([&amp;quot;DELETE&amp;quot;,&#39;GET&#39;]) 
@csrf_exempt
@permission_classes([IsAuthenticated])
@authentication_classes([TokenAuthentication])
def delete_user(request, pk):

    try:
        user_profile = MyAccount.objects.get(id=pk)
    except ObjectDoesNotExist:
        return JsonResponse({&#39;response&#39;: &amp;quot;given object does not exist&amp;quot;}, safe=False, status=status.HTTP_404_NOT_FOUND)

    user = request.user
    if user_profile != user: 
        return JsonResponse({&#39;response&#39;:&amp;quot;You don&#39;t have permission to delete the record.&amp;quot;}, safe=False, status=status.HTTP_401_UNAUTHORIZED)

    try:
        user_profile.delete()  #retuns 1 or 0
        return JsonResponse({&#39;user_delete&#39;: &amp;quot;record deleted&amp;quot;}, safe=False, status=status.HTTP_200_OK)
    except ObjectDoesNotExist as e:
        return JsonResponse({&#39;error&#39;: str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)
    except Exception:
        return JsonResponse({&#39;error&#39;: &#39;Something terrible went wrong&#39;}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



# login view and get token
@api_view([&amp;quot;POST&amp;quot;, ])
def drflogin(request):

    email = request.data.get(&amp;quot;email&amp;quot;)
    username = request.data.get(&amp;quot;username&amp;quot;)
    password = request.data.get(&amp;quot;password&amp;quot;)
    account = MyAccount.objects.filter(email=email) | MyAccount.objects.filter(username=username)
    if not account:
        return Response({&amp;quot;error&amp;quot;: &amp;quot;Login failed&amp;quot;}, status=status.HTTP_401_UNAUTHORIZED)
    # authenticate(email=email, password=password)  # returns none if not authenticated
    account = authenticate(email=account[0].email, password=password)
    token, _ = Token.objects.get_or_create(user=account)
    login(request,account)  
    renderer= Response({&amp;quot;response&amp;quot; : &amp;quot;Successfully authenticated&amp;quot;,  &amp;quot;pk&amp;quot;: account.pk, &amp;quot;username&amp;quot;: account.username, &amp;quot;token&amp;quot;: token.key }, template_name= &amp;quot;Accountsapp/loginuser.html&amp;quot;, headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
    return renderer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setup end points for our API&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from django.urls import path, include
from . import views as drf_views


app_name = &#39;Accountsapp&#39;

urlpatterns = [

    path(&#39;drf_users/&#39;, drf_views.get_users, name= &#39;drf_users&#39;),
    path(&#39;drf_user/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.get_given_user, name= &#39;drf_get_user&#39;),
    path(&#39;drf_updateuser/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.update_user, name= &#39;drf_updateusers&#39;),
    path(&#39;drf_deleteuser/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.delete_user, name= &#39;drf_deleteuser&#39;),
    path(&#39;drf_adduser/&#39;, drf_views.user_add_view, name= &#39;drf_adduser&#39;),
    path(&#39;drf_login/&#39;, drf_views.drflogin, name=&#39;drf_login&#39;),

    
]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first create users and then test  delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions.&lt;/p&gt;
&lt;h2 id=&#34;span-style-colororange-post-span-request-add-user&#34;&gt;&lt;span style= &#34;color:orange&#34;&gt; POST &lt;/span&gt; REQUEST: &lt;strong&gt;ADD USER&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_adduser/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ea8W3Bj.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorgreen-get-span-request-get-users&#34;&gt;&lt;span style= &#34;color:green&#34;&gt; GET &lt;/span&gt; REQUEST: &lt;strong&gt;GET USERS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_users/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://127.0.0.1:8000/drf_users/&#39; \
--header &#39;Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dPnv4J4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorred-del-span-request-delete-user&#34;&gt;&lt;span style= &#34;color:RED&#34;&gt; DEL &lt;/span&gt; REQUEST: &lt;strong&gt;DELETE USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_deleteuser/&amp;lt;int:pk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request DELETE &#39;http://127.0.0.1:8000/drf_deleteuser/21&#39; \
--header &#39;Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6IFah1s.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colordodgerblue-put-span-request-update-user&#34;&gt;&lt;span style= &#34;color:dodgerblue&#34;&gt; PUT &lt;/span&gt; REQUEST: &lt;strong&gt;UPDATE USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here&amp;amp;email=updated_email_here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request PUT &#39;http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl&amp;amp;email=rcbfl@gmail.com&#39; \
--header &#39;Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using postman
&lt;img src=&#34;https://i.imgur.com/LhVZ34L.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorgreen-get-span-request-get-user&#34;&gt;&lt;span style= &#34;color:green&#34;&gt; GET &lt;/span&gt; REQUEST: &lt;strong&gt;GET USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_user/&amp;lt;int:pk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://127.0.0.1:8000/drf_user/8&#39; \
--header &#39;Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LiPdZIe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;front-end-setup&#34;&gt;Front end setup&lt;/h2&gt;
&lt;p&gt;In root directory create folder  &lt;code&gt;templates\Accountsapp\&lt;/code&gt; and create &lt;code&gt;RegiserUser.html&lt;/code&gt; file in it. Create form field in the file as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;          &amp;lt;form class=&amp;quot;form-horizontal&amp;quot; action=&amp;quot;&amp;quot; method=&amp;quot;post&amp;quot;  id=&amp;quot;myForm&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
          	{% csrf_token %}
            &amp;lt;!-- Name input--&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;username&amp;quot;&amp;gt;Name&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Your username&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Email input--&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;email&amp;quot;&amp;gt;Your E-mail&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Your email&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- password body --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your password&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- password body --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;password2&amp;quot;&amp;gt;Password2&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;password2&amp;quot; name=&amp;quot;password2&amp;quot; type=&amp;quot;password&amp;quot; placeholder=&amp;quot;confirm password&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            
            &amp;lt;!-- superuser input --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;superuser&amp;quot;&amp;gt;Is superuser&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;issuperuser&amp;quot; name=&amp;quot;issuperuser&amp;quot; type=&amp;quot;checkbox&amp;quot;  class=&amp;quot;form-control&amp;quot; &amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
 
    
            &amp;lt;!-- Form actions --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-6 text-left&amp;quot;&amp;gt;
                &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary btn-lg&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
              &amp;lt;/div&amp;gt;


            &amp;lt;/div&amp;gt;
          &amp;lt;/fieldset&amp;gt;
          &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the form is created, we now need to take the input from the form and send to the register user API &lt;code&gt;drf_adduser/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;RegisterUser.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;


			function getCookie(name) {
		    var cookieValue = null;
		    if (document.cookie &amp;amp;&amp;amp; document.cookie !== &#39;&#39;) {
		        var cookies = document.cookie.split(&#39;;&#39;);
		        for (var i = 0; i &amp;lt; cookies.length; i++) {
		            var cookie = cookies[i].trim();
		            // Does this cookie string begin with the name we want?
		            if (cookie.substring(0, name.length + 1) === (name + &#39;=&#39;)) {
		                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
		                break;
		            }
		        }
		    }
		    return cookieValue;
		}
		var csrftoken = getCookie(&#39;csrftoken&#39;);



function fetchcall(event) {

		event.preventDefault();
		console.log(&#39;form submitted&#39;);
	var username = document.getElementById(&amp;quot;username&amp;quot;).value;
	var email = document.getElementById(&amp;quot;email&amp;quot;).value;
	var password = document.getElementById(&amp;quot;password&amp;quot;).value;
	var password2 = document.getElementById(&amp;quot;password2&amp;quot;).value;
	var issuperuser = document.getElementById((&#39;issuperuser&#39;)).checked;
	console.log(issuperuser)

		var url = &#39;/drf_adduser/&#39;;

			fetch(url, {
				method:&#39;POST&#39;,
				headers:{
					&#39;Content-type&#39;:&#39;application/json&#39;,
					&#39;X-CSRFToken&#39;:csrftoken,
				},
				body:JSON.stringify({
					&#39;email&#39;:email,
					&#39;username&#39;:username,
					&amp;quot;password&amp;quot;:password,
					&amp;quot;password2&amp;quot;:password2,
					&amp;quot;is_superuser&amp;quot;: issuperuser
				})
			}
			).then(function(response){
				store_response= response;
				return response.json();

			}).then(function(data){
				store_data =JSON.stringify(data);
				document.getElementById(&amp;quot;message&amp;quot;).innerHTML=  store_data;
			}).catch(function(error){
			console.error(error);
		});

	}
			
	var myForm = document.getElementById(&amp;quot;myForm&amp;quot;);

		console.log(username, password, myForm);
	myForm.addEventListener(&#39;submit&#39;, fetchcall);
	
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make this work in front-end, we need to register the file to &lt;code&gt;Accountsapp/views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def register_user(request):
	# if request.user.is_authenticated:
	return render(request, &amp;quot;Accountsapp/RegisterUser.html&amp;quot;, {&#39;Title&#39;: &amp;quot;Register new user&amp;quot;})

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
