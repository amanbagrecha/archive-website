[{"authors":null,"categories":null,"content":"I am a senior year civil engineering undergraduate student at Rashtreeya Vidyalaya College of Engineering. I am specializing in the field of Deep Learning for earth observation.\nI was the President of American Society of Civil Engineers Student chapter RVCE. I have been fortunate enough to be part of the Concrete canoe team leading the structural and hull design. I regularly write on Quora. I tweet about FOSS, Deep Learning and my wild thoughts.\n  Download my resum√©.\n","date":1583020800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1583020800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://amanbagrecha.github.io/author/aman-bagrecha/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/aman-bagrecha/","section":"authors","summary":"I am a senior year civil engineering undergraduate student at Rashtreeya Vidyalaya College of Engineering. I am specializing in the field of Deep Learning for earth observation.\nI was the President of American Society of Civil Engineers Student chapter RVCE.","tags":null,"title":"Aman Bagrecha","type":"authors"},{"authors":null,"categories":null,"content":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"bb560906b6a99893cc21387348c0b074","permalink":"https://amanbagrecha.github.io/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Âê≥ÊÅ©ÈÅî","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Aman Bagrecha FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://amanbagrecha.github.io/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"üìä Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"https://amanbagrecha.github.io/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"https://amanbagrecha.github.io/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"https://amanbagrecha.github.io/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":[],"categories":["python"],"content":"In this blog post we look into how to download precipitation data from NASA website. I show you two methods, one- directly reading the data using request module and preprocessing the file using pandas. Two- To download netCDF file using wget and using xarray to preprocess and visualise the data.\nWe will use xarray to preprocess the data and visualisation. We are going to work with GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree x 0.1 degree V06 (GPM_3IMERGHHL) data provided by NASA which gives half-hourly precipitation values for entire globe.\nMethod 1: Using python to read on-the-fly and preprocess the data. Let us first look at one file which we need to read. Dataset: 3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5\rprecipitationCal[0][0], 0, 0, 0\rprecipitationCal[0][1], 0, 0, 0\rprecipitationCal[0][2], 0, 0, 0\rprecipitationCal[0][3], 0, 0, 0\rlat, 12.85, 12.95, 13.05\rlon, 77.45, 77.55, 77.65, 77.75\rtime, 1588377600\r As can be seen the first line contains information on satellite, start-time and date, end-time and date. It also lists the sensor on board the satellite. The second to fifth line lists the values for grid points. When selecting the subset from the NASA website, we choose a bounding box and here we see that we have 12 values: 4 rows and 3 columns. Each value is the centroid of the grid which spans 0.1 by 0.1 degree units. The the lat and lon rows are the centroid position on the map. The last row is the time since launch of the satellite in seconds.\nNote: we would need to have authorization in order to make GET request to the API. In google colab you need to first create .netrc file with credientials machine urs.earthdata.nasa.gov login your_login_username password your_password stored in the file. Then paste that file inside /root folder. Only then will you be authorised to fetch the data\nWe will be using google colab to process and read the file. The format we read in will be ASCII format.\nfrom google.colab import files\rimport pandas as pd\rimport numpy as np\rimport datetime\rimport re\rimport requests\r our subset.txt file looks like the following. df = pd.read_csv('/content/subset.txt', header=None, sep='\\n')[0] # dataframe to read the text file which contains all the download links\r_df = pd.DataFrame() # dataframe to store the result\rfor i in range(len(df)):\rurl = df[i] # reading the content of the file, line by line\rresult = requests.get(url)\rtry:\rresult.raise_for_status()\rf = result.content.decode(\u0026quot;utf-8\u0026quot;).splitlines() # decode the content recieved and split the line\rdate_str = re.findall('3IMERG.(.*?)-', f[0])[0] #yyyymmdd use regex to find the date str in `3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5`\rtime_str = re.findall('-S(.*?)-', f[0])[0] #HHMMSS use regex to find the time str in `3B-HHR.MS.MRG.3IMERG.20200502-S000000-E002959.0000.V06B.HDF5`\rdate_obj = datetime.datetime.strptime(date_str, '%Y%m%d').date() # convert the date str to date object\rtime_obj = datetime.datetime.strptime(time_str, '%H%M%S').time() # convert the time str to time object\rl1 = list(map(func1, f)) # map the content of the file by func1 and convert to list l2= list(map(func2, l1[1:4])) # # map the content of the file by func2 and convert to list avg = sum(l2)/len(l2) # take avg of all the resulting precipitation value\r_df.loc[date_obj, time_obj] = avg\rexcept:\rprint('requests.get() returned an error code '+str(result.status_code))\r_df.to_csv('output.csv')\r In the above snippet, we first read the file using request module and decode the content. We use regex to find the match (in our case to find the precipitation value) and convert to date-time objects. Then, we take the average of all the values (precipitation) and store in a new dataframe. This dataframe will be our final product having date_obj number of rows and time_obj number of columns. The functions func1 and func2 are used here to calculate the average rainfall in mm/hr for half-hourly period.\n# we split the string on comma and extract the precipitation value alone\rdef func1(f):\rreturn f.split(',')[-2:]\r# we take the sum of the all the precipitation value which will be later used to take the average across all the ROI\rdef func2(f):\rreturn sum(list(map(float, f)))\r At this stage all the files are read and the dataframe can now be exported to csv. Our csv looks like the following. Method 2: Using wget to download and then preprocess using xarray (simple and easy) We first download all files using wget having stored all the urls stored in a text file. These files are then read using xarray which makes it really easy to process and get the information we require. We first run shell command inside colab.\n! wget --load-cookies /.urs_cookies --save-cookies /root/.urs_cookies --auth-no-challenge=on --user=your_user_name --ask-password --content-disposition -i \u0026lt;url text file\u0026gt;\r import xarray as xr\rimport glob\rds = xr.merge([xr.open_dataset(f) for f in glob.glob('/content/*.nc4')]) # merge all the netcdf files into a single xarray dataset\rds1.precipitationCal.mean(dim=('lon', 'lat')).plot() # calculate the average precipitation on half-hourly basis.\r At this stage we have the data preprocessed and is now ready to be used for various modelling and analysis phase.\nFinal Comments In this tech-blog we looked into how to download and preprocess netCDF data provided by NASA GES DISC. We looked at two methods, one with request and pandas while the other with wget and xarray. All performed on google colab. It is to note that, there is setup required i.e, to create a new .netrc file and store inside root directory of colab else it returns an authorisation error. We looked at how easy it is to process netCDF data in xarray and how wget command can be run on colab.\n Data courtesy: Huffman, G.J., E.F. Stocker, D.T. Bolvin, E.J. Nelkin, Jackson Tan (2019), GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree x 0.1 degree V06, Greenbelt, MD, Goddard Earth Sciences Data and Information Services Center (GES DISC), Accessed: [Data Access Date], 10.5067/GPM/IMERG/3B-HH-L/06\n ","date":1623283200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623341005,"objectID":"f149a5d405f6a8e7107a6f885ad432c0","permalink":"https://amanbagrecha.github.io/post/xarray/download-and-preprocess-nasa-gpm-imerg-data-using-python-and-wget/","publishdate":"2021-06-10T00:00:00Z","relpermalink":"/post/xarray/download-and-preprocess-nasa-gpm-imerg-data-using-python-and-wget/","section":"post","summary":"In this blog post we look into how to download precipitation data from NASA website. I show you two methods, one- directly reading the data using `request` module and preprocessing the file using `pandas`. Two- To download netCDF file using wget and using `xarray` to preprocess and visualise the data.","tags":["xarray","colab"],"title":"Download and preprocess NASA GPM IMERG Data using python and wget","type":"post"},{"authors":[],"categories":[],"content":"The problem statement Any land-use land cover classification needs to be validated with ground-truth data to measure the accuracy. A key single-valued statistic to determine the effectiveness of classification is Cohen‚Äôs kappa. This validation metric has been fairly widely used for unbalanced classification as well which expresses a level of agreement between two annotators on a classification problem.\nThe objective of this quality assessment was to validate the land cover map performed on June, 2020 sentinel-2 imagery by k-means classification algorithm, thus providing a statistical measure of overall class predictions. The validation was done using an independent set of sample points (~500) generated randomly following stratified random sampling design, to capture the variance within the class\nAfter running the tool, the sample points were manually assigned to the ground-truth class. The ground-truth dataset was taken to be Bing-satellite imagery as a proxy for field data. Each sample point was labelled by visual inspection on the ground-truth dataset.\nStep 1: Classify Image - Load raster Image - Open K-means clustering for grids under SAGA tools. Select the raster Image as grid and in this case we specify 4 classes - Click Run  At this stage we have unsupervised k-means clustering output ready.\n classification of rr nagar, bangalore. Forest, Urban, water, Bareland\nStep 2: Convert to polygon (vector format) - Select Polygonize (Raster to Vector) tool under GDAL-\u0026gt;Raster Conversion - Select the classified image as input. Leave everything else as default. The output would be a Vectorised scratch layer. - Fix geometries (this step is important here to avoid any error in further steps) Vector Geometry-\u0026gt;Fix Geometry Output: Fix Geometry scratch layer\nStep 3: Dissolve the layer on DN field  In this step we dissolve the layer based on the DN value. This will ensure that each polygon can be evaluated based on the land class type which is needed for stratified random sampling. Make sure to select dissolve field as DN\n Step 4: Create stratified random samples Vector-\u0026gt;research tools-\u0026gt; Random Points inside Polygon step 5: Extract raster values to sample layer  We extract the raster value, which is essentially the land cover class for the classified image. We use Sample Raster Values function here. The input layer is the random points we generated earlier and the the raster layer is the classified image. The output adds a new column to the sample points layer with the prediction class of the land-cover.   AND THE CORRESPONDING ATTRIBUTE TABLE\n Step 6: Ground Truth Labelling using Bing maps  At this stage we are ready to validate the image using Bing maps as ground truth. We turn on the edit mode and create new field named Actual class. THen we visvually inspect the class on the map and note the land-cover class. Once we inspect all the sample points we can use cohens statistics to determine the validation result. alternatively, simply calculate the accuracy would also suffice the need.\n  Add other field to the attribute table with reclassification\n CASE WHEN PREDICTED_1 is 2 THEN 'Urban' WHEN PREDICTED_1 is 1 THEN 'Bareland'\rWHEN PREDICTED_1 is 4 THEN 'Forest'\rWHEN PREDICTED_1 is 3 THEN 'Urban'\rEND\r ","date":1623196800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623066166,"objectID":"3a45a2ad16d50fc70c8522d1f84ada9f","permalink":"https://amanbagrecha.github.io/post/qgis/validating-lulc-classes-in-qgis/","publishdate":"2021-06-09T00:00:00Z","relpermalink":"/post/qgis/validating-lulc-classes-in-qgis/","section":"post","summary":"The objective of this quality assessment was to validate the land cover map performed on June, 2020 sentinel-2 imagery by k-means classification algorithm in QGIS","tags":["qgis","machine learning"],"title":"Validating LULC classes in QGIS","type":"post"},{"authors":[],"categories":["openlayers"],"content":"Main steps This blog demonstrates how to geocode an address using mapbox api as the client provider implemented in openlayers v6. Additionally zoom in to the search location as text provided on the search bar. This one page appication demostrates only key elements, rest of the customisation is at discretion of the viewer.\nSetup the project We first create basic single html file to include all elements (javascript, css and html). Ideally, when the application scales, you would create a seperate file for each component.\n Create html file and add basic elements  \u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt;\r\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\u0026quot; type=\u0026quot;text/css\u0026quot;\u0026gt;\r\u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt;\r.autocomplete {\rposition: relative;\rdisplay: inline-block;\r}\rinput {\rborder: 1px solid transparent;\rbackground-color: #f1f1f1;\rpadding: 10px;\rfont-size: 16px;\r}\rinput[type=text] {\rbackground-color: #f1f1f1;\rwidth: 100%;\r}\rinput[type=submit] {\rbackground-color: DodgerBlue;\rcolor: #fff;\rcursor: pointer;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h2\u0026gt;Autocomplete\u0026lt;/h2\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;form method=\u0026quot;post\u0026quot; \u0026gt;\r\u0026lt;div class=\u0026quot;autocomplete\u0026quot; style=\u0026quot;width:300px;\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;myInput\u0026quot; type=\u0026quot;text\u0026quot; name=\u0026quot;myCountry\u0026quot; placeholder=\u0026quot;Country\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;input type=\u0026quot;submit\u0026quot; id = \u0026quot;geocodingSubmit\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;div id='project_map', class=\u0026quot;map\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;!-- \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt;\r\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt;\rvar project_maplayer = new ol.layer.Tile({\r// source: new ol.source.OSM(),\rsource: new ol.source.XYZ({\rattributions: ['Powered by Esri',\r'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],\rattributionsCollapsible: false,\rurl: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\rmaxZoom: 23\r}),\rzIndex: 0\r});\rvar project_view = new ol.View({\rprojection: 'EPSG:4326',\rcenter: [-81.80808208706726, 27.285095000261222],\rzoom: 7,\r});\rvar Projectmap = new ol.Map({\rlayers: [project_maplayer,],\rtarget: 'project_map',\rview: project_view,\rconstrainOnlyCenter: true,\r});\r\u0026lt;/script\u0026gt;\r We added the following elements,\n Search bar: we setup the search function to input values as address and wrap it within a form with post request. Map : the div element with id=\u0026quot;project_map\u0026quot; holds the map element and the script does the following. First, create layer with ESRI basemap. Second, add the layer to the Map object.  At this stage the application looks like the following image\nAdd autocomplete functionality We fetch from the api and populate our top results in a list format on key press. Also, we style the search bar using css.\n\u0026lt;style\u0026gt;\r.autocomplete-items {\rposition: absolute;\rborder: 1px solid #d4d4d4;\rborder-bottom: none;\rborder-top: none;\rz-index: 99;\r/*position the autocomplete items to be the same width as the container:*/\rtop: 100%;\rleft: 0;\rright: 0;\r}\r.autocomplete-items div {\rpadding: 10px;\rcursor: pointer;\rbackground-color: #fff; border-bottom: 1px solid #d4d4d4; }\r/*when hovering an item:*/\r.autocomplete-items div:hover {\rbackground-color: #e9e9e9; }\r/*when navigating through the items using the arrow keys:*/\r.autocomplete-active {\rbackground-color: DodgerBlue !important; color: #ffffff; }\r\u0026lt;/style\u0026gt;\r\u0026lt;script\u0026gt;\rmyHeaders = {'Content-Type': 'application/json', 'Access-Control-Allow-Credentials' : true,\r'Access-Control-Allow-Origin':'*',\r'Accept': 'application/json'}\rfunction autocomplete(inp) {\r/*the autocomplete function takes one argument,\rthe text field element*/\rvar currentFocus;\r/*execute a function when someone writes in the text field:*/\rinp.addEventListener(\u0026quot;input\u0026quot;, function(e) {\rvar a, b, i, val = this.value;\rvar ACCESS_TOKEN_KEY = 'your_token_here'\r/*close any already open lists of autocompleted values*/\rvar URL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${val}.json?access_token=${ACCESS_TOKEN_KEY}\u0026amp;types=address,region,poi,country,district,locality,neighborhood,postcode\u0026amp;country=us`\rfetch(URL,{\rmethod: 'GET',\rheaders: myHeaders,\r}).then(response =\u0026gt; response.json())\r.then(data =\u0026gt; {\rgeocode_data = data;\r// console.log(data) closeAllLists();\rif (!val) { return false;}\rcurrentFocus = -1;\r/*create a DIV element that will contain the items (values):*/\ra = document.createElement(\u0026quot;DIV\u0026quot;);\ra.setAttribute(\u0026quot;id\u0026quot;, this.id + \u0026quot;autocomplete-list\u0026quot;);\ra.setAttribute(\u0026quot;class\u0026quot;, \u0026quot;autocomplete-items\u0026quot;);\r/*append the DIV element as a child of the autocomplete container:*/\rthis.parentNode.appendChild(a);\r/*for each item in the array...*/\rfor (i = 0; i \u0026lt; geocode_data.features.length; i++) {\rb = document.createElement(\u0026quot;DIV\u0026quot;);\r/*insert a input field that will hold the current array item's value:*/\rb.innerHTML += geocode_data.features[i].place_name;\rb.innerHTML += `\u0026lt;input type='hidden' style=\u0026quot;display: none;\u0026quot; id=${i}-center-cc coordinates='${geocode_data.features[i].center}' value='${geocode_data.features[i].place_name}'\u0026gt;`;\r/*execute a function when someone clicks on the item value (DIV element):*/\rb.addEventListener(\u0026quot;click\u0026quot;, function(e) {\r/*insert the value for the autocomplete text field:*/\rvar input_tag = this.getElementsByTagName(\u0026quot;input\u0026quot;)[0]\rinp.value = input_tag.value;\rinp.setAttribute(\u0026quot;coordinates\u0026quot;, input_tag.getAttribute('coordinates'));\r/*close the list of autocompleted values,\r(or any other open lists of autocompleted values:*/\rcloseAllLists();\r});\ra.appendChild(b);\r}\r})\r.catch(error =\u0026gt; {\rconsole.error('There has been a problem with your fetch operation:', error);\r});\r});\r// });\r/*execute a function presses a key on the keyboard:*/\rinp.addEventListener(\u0026quot;keydown\u0026quot;, function(e) {\rvar x = document.getElementById(this.id + \u0026quot;autocomplete-list\u0026quot;);\rif (x) x = x.getElementsByTagName(\u0026quot;div\u0026quot;);\rif (e.keyCode == 40) {\r/*If the arrow DOWN key is pressed,\rincrease the currentFocus variable:*/\rcurrentFocus++;\r/*and and make the current item more visible:*/\raddActive(x);\r} else if (e.keyCode == 38) { //up\r/*If the arrow UP key is pressed,\rdecrease the currentFocus variable:*/\rcurrentFocus--;\r/*and and make the current item more visible:*/\raddActive(x);\r} else if (e.keyCode == 13) {\r/*If the ENTER key is pressed, prevent the form from being submitted,*/\re.preventDefault();\rif (currentFocus \u0026gt; -1) {\r/*and simulate a click on the \u0026quot;active\u0026quot; item:*/\rif (x) x[currentFocus].click();\r}\r}\r});\rfunction addActive(x) {\r/*a function to classify an item as \u0026quot;active\u0026quot;:*/\rif (!x) return false;\r/*start by removing the \u0026quot;active\u0026quot; class on all items:*/\rremoveActive(x);\rif (currentFocus \u0026gt;= x.length) currentFocus = 0;\rif (currentFocus \u0026lt; 0) currentFocus = (x.length - 1);\r/*add class \u0026quot;autocomplete-active\u0026quot;:*/\rx[currentFocus].classList.add(\u0026quot;autocomplete-active\u0026quot;);\r}\rfunction removeActive(x) {\r/*a function to remove the \u0026quot;active\u0026quot; class from all autocomplete items:*/\rfor (var i = 0; i \u0026lt; x.length; i++) {\rx[i].classList.remove(\u0026quot;autocomplete-active\u0026quot;);\r}\r}\rfunction closeAllLists(elmnt) {\r/*close all autocomplete lists in the document,\rexcept the one passed as an argument:*/\rvar x = document.getElementsByClassName(\u0026quot;autocomplete-items\u0026quot;);\rfor (var i = 0; i \u0026lt; x.length; i++) {\rif (elmnt != x[i] \u0026amp;\u0026amp; elmnt != inp) {\rx[i].parentNode.removeChild(x[i]);\r}\r}\r}\r/*execute a function when someone clicks in the document:*/\rdocument.addEventListener(\u0026quot;click\u0026quot;, function (e) {\rcloseAllLists(e.target);\r});\r}\r/*initiate the autocomplete function on the \u0026quot;myInput\u0026quot; element */\rautocomplete(document.getElementById(\u0026quot;myInput\u0026quot;));\r\u0026lt;/script\u0026gt;\r The following is the explanation of the code\n autocomplete function: The function takes an element as input which needs to be populated. Then we add an event listner which on change in input field, triggers. A GET request is sent across for the input typed and the result is populated in a form of dropdown. We add some styling on key-down so as to select the search.  At this point, with correct mapbox api access key, we have built the autocomplete functionality.\nLast steps We now only need to implement the submit functionality. On click of submit button, the address is located on the map and zoomed in. This is done using a function we call centerMap\nfunction CenterMap() {\rvar [long, lat] = document.getElementById(\u0026quot;myInput\u0026quot;).getAttribute(\u0026quot;coordinates\u0026quot;).split(\u0026quot;,\u0026quot;).map(Number)\rconsole.log(\u0026quot;Long: \u0026quot; + long + \u0026quot; Lat: \u0026quot; + lat);\rProjectmap.getView().setCenter(ol.proj.transform([long, lat], 'EPSG:4326', 'EPSG:4326'));\rProjectmap.getView().setZoom(5);\r}\r Now we add the centerMap function on click of submit\ndocument.getElementById(\u0026quot;geocodingSubmit\u0026quot;).addEventListener('click', function(e){\re.preventDefault();\rCenterMap()\r})\r ","date":1621866893,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621866893,"objectID":"f3c3e376bc0dde891d19e2b7fea666e6","permalink":"https://amanbagrecha.github.io/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/","section":"post","summary":"How to bulid geocoding web-app using openlayers","tags":[],"title":"Reverse Geocode using Mapbox API with Zoom functionality","type":"post"},{"authors":[],"categories":[],"content":"\n\rProject setup create project\ndjango-admin startproject login_boiler_plate\rcreate app python manage.py startapp GisMap\rcreate superuser python manage.py createsuperuser\r in settings.py\nINSTALLED_APPS = [\r...\r'GisMap',\r]\rMEDIA_ROOT = os.path.join(BASE_DIR, 'media') MEDIA_URL = '/media/'\r in models.py\nfrom django.db import models\rfrom django.contrib.auth.models import User\rclass ImageUpload(models.Model):\ruser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\rimage = models.ImageField( null=False, blank=False, upload_to = 'images/')\rdate_created = models.DateTimeField(auto_now_add=True, null=True)\rdef __str__(self):\rreturn self.user.username + \u0026quot; uploaded: \u0026quot;+ self.image.name\r in forms.py\nfrom django.forms import ModelForm\rfrom django.contrib.auth.models import User\rfrom .models import ImageUpload\rclass ImageForm(ModelForm):\rclass Meta:\rmodel = ImageUpload\rfields = ('image',)\r in urls.py\nfrom django.conf import settings\rfrom django.conf.urls.static import static\rif settings.DEBUG:\rurlpatterns += static(settings.MEDIA_URL,\rdocument_root=settings.MEDIA_ROOT)\r in home.html\n\u0026lt;!-- Modal --\u0026gt;\r\u0026lt;form method = \u0026quot;post\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;modal fade\u0026quot; id=\u0026quot;exampleModal\u0026quot; tabindex=\u0026quot;-1\u0026quot; role=\u0026quot;dialog\u0026quot; aria-labelledby=\u0026quot;exampleModalLabel\u0026quot; aria-hidden=\u0026quot;true\u0026quot; \u0026gt;\r{% csrf_token %}\r\u0026lt;div class=\u0026quot;modal-dialog\u0026quot; role=\u0026quot;document\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;modal-content\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;modal-header\u0026quot;\u0026gt;\r\u0026lt;h5 class=\u0026quot;modal-title\u0026quot; id=\u0026quot;exampleModalLabel\u0026quot;\u0026gt;Upload Image\u0026lt;/h5\u0026gt;\r\u0026lt;button type=\u0026quot;button\u0026quot; class=\u0026quot;close\u0026quot; data-dismiss=\u0026quot;modal\u0026quot; aria-label=\u0026quot;Close\u0026quot;\u0026gt;\r\u0026lt;span aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt;\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;modal-body\u0026quot;\u0026gt;\r{{ image_form.image }}\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;modal-footer\u0026quot;\u0026gt;\r\u0026lt;button type=\u0026quot;button\u0026quot; class=\u0026quot;btn btn-secondary\u0026quot; data-dismiss=\u0026quot;modal\u0026quot;\u0026gt;Close\u0026lt;/button\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Save Image\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r in views.py\n@login_required(login_url='login')\rdef home_page(request):\rif request.method == 'POST':\rform = ImageForm(request.POST , request.FILES)\rprint(form)\rif form.is_valid():\rprint(\u0026quot;is valid\u0026quot;)\robj = form.save(commit=False)\robj.user = request.user\robj.save()\rreturn redirect('home')\relse:\rImageform = ImageForm()\rreturn render(request, \u0026quot;GisMap/home.html\u0026quot;, {'Title': \u0026quot;Home Page\u0026quot;, \u0026quot;image_form\u0026quot;: ImageForm})\r Upload to S3 bucket : Django django-storages doc\nInstall packages to support s3 communication\npip install django-storages\rpip install boto3\r in settings.py\nINSTALLED_APPS = [\r...\r'storages',\r]\rAWS_ACCESS_KEY_ID = \u0026quot;\u0026quot;\rAWS_SECRET_ACCESS_KEY = \u0026quot;\u0026quot;\rAWS_STORAGE_BUCKET_NAME = \u0026quot;\u0026quot;\rAWS_S3_FILE_OVERWRITE = False\rAWS_DEFAULT_ACL = None\rDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\rAWS_QUERYSTRING_AUTH = False // removes the query string\r NOTE: in S3 bucket, make the bucket public to be able to access to anyone without appending query string. aws docs\n{\r\u0026quot;Version\u0026quot;:\u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;:[\r{\r\u0026quot;Sid\u0026quot;:\u0026quot;PublicRead\u0026quot;,\r\u0026quot;Effect\u0026quot;:\u0026quot;Allow\u0026quot;,\r\u0026quot;Principal\u0026quot;: \u0026quot;*\u0026quot;,\r\u0026quot;Action\u0026quot;:[\u0026quot;s3:GetObject\u0026quot;,\u0026quot;s3:GetObjectVersion\u0026quot;],\r\u0026quot;Resource\u0026quot;:[\u0026quot;arn:aws:s3:::DOC-EXAMPLE-BUCKET/*\u0026quot;]\r}\r]\r}\r Get Point data from image meta deta It is called Exchangeable image file format (EXIF) Since GIS data, we need some installs.\ngeodjango\npip install django-geo\r NOTE: ensure os4geo is installed: install from here if not done. https://qgis.org/en/site/forusers/download.html\nand make the following changes in settings.py\nINSTALLED_APPS = [\r...\r'django.contrib.gis',\r]\rDATABASES = {\r'default': {\r# 'ENGINE': 'django.db.backends.sqlite3',\r'ENGINE': 'django.contrib.gis.db.backends.spatialite',\r'NAME': BASE_DIR / 'db.sqlite3',\r}\r}\rimport os\rimport posixpath\rif os.name == 'nt':\rimport platform\rOSGEO4W = r\u0026quot;C:\\OSGeo4W\u0026quot;\rif '64' in platform.architecture()[0]:\rOSGEO4W += \u0026quot;64\u0026quot;\rassert os.path.isdir(OSGEO4W), \u0026quot;Directory does not exist: \u0026quot; + OSGEO4W\ros.environ['OSGEO4W_ROOT'] = OSGEO4W\ros.environ['GDAL_DATA'] = OSGEO4W + r\u0026quot;\\share\\gdal\u0026quot;\ros.environ['PROJ_LIB'] = OSGEO4W + r\u0026quot;\\share\\proj\u0026quot;\ros.environ['PATH'] = OSGEO4W + r\u0026quot;\\bin;\u0026quot; + os.environ['PATH']\r in models.py\nfrom django.contrib.gis.db import models\rclass ImageUpload():\r... geom = models.PointField( null=True)\r in views.py, courtesy of Jayson DeLancey\n#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#\rfrom PIL import Image\rfrom urllib.request import urlopen\rfrom PIL.ExifTags import GPSTAGS\rfrom PIL.ExifTags import TAGS\rdef get_decimal_from_dms(dms, ref):\rdegrees = dms[0]\rminutes = dms[1] / 60.0\rseconds = dms[2] / 3600.0\rif ref in ['S', 'W']:\rdegrees = -degrees\rminutes = -minutes\rseconds = -seconds\rreturn round(degrees + minutes + seconds, 5)\rdef get_coordinates(geotags):\rlat = get_decimal_from_dms(geotags['GPSLatitude'], geotags['GPSLatitudeRef'])\rlon = get_decimal_from_dms(geotags['GPSLongitude'], geotags['GPSLongitudeRef'])\rreturn (lon, lat)\rdef get_geotagging(exif):\rif not exif:\rraise ValueError(\u0026quot;No EXIF metadata found\u0026quot;)\rgeotagging = {}\rfor (idx, tag) in TAGS.items():\rif tag == 'GPSInfo':\rif idx not in exif:\rraise ValueError(\u0026quot;No EXIF geotagging found\u0026quot;)\rfor (key, val) in GPSTAGS.items():\rif key in exif[idx]:\rgeotagging[val] = exif[idx][key]\rreturn geotagging\r#_______________________________________________________________________________________________________________________________________#\r In views.py/home_page function\nfrom django.contrib.gis.geos import Point\r@login_required(login_url='login')\rdef home_page(request):\rif request.method == 'POST':\rform = ImageForm(request.POST , request.FILES)\rimg = Image.open(request.FILES.get('image'))\rif form.is_valid():\rtry:\robj = form.save(commit=False)\robj.user = request.user\robj.image_url = obj.image.url\rgeotags = get_geotagging(img._getexif())\rprint(get_coordinates(geotags))\robj.geom = Point(get_coordinates(geotags)) # X is longitude, Y is latitude, Point(X,Y)\rprint(obj.geom) obj.save()\rmessages.success(request, f'image uploaded succesfully')\rexcept ValueError as e:\rmessages.warning(request, e)\relse:\rmessages.warning(request, f'Invalid image type')\rreturn redirect('home')\relse:\rImageform = ImageForm()\rreturn render(request, \u0026quot;GisMap/home.html\u0026quot;, {'Title': \u0026quot;Home Page\u0026quot;, \u0026quot;image_form\u0026quot;: ImageForm})\r Upload multiple image stackoverflow answer\nMake a model which or accepts image data\nclass Photos(models.Model):\ruser = models.ForeignKey(User, null=True, on_delete=models.CASCADE)\rimage = models.ImageField(upload_to='photos/',null=True,blank=False)\rdate_created = models.DateTimeField(auto_now_add=True, null=True)\rimage_url = models.URLField(max_length=250, null=True, blank=False)\rclass Meta:\rverbose_name = 'Photo'\rverbose_name_plural = 'Photos'\rdef __str__(self):\rreturn self.user.username + \u0026quot; uploaded image \u0026quot;+ self.image.name\r Make a new form which accepts multiple image files to be uploaded at once.\nclass PhotoForm(forms.ModelForm):\rimages = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))\rclass Meta:\rmodel = Photos\rfields = ('images',)\r in views.py file\nif request.method == \u0026quot;POST\u0026quot;:\r#images will be in request.FILES\rpost_request, files_request = request.POST, request.FILES # returns \u0026lt;MultiValueDict: {'images': [\u0026lt;InMemoryUploadedFile: DSCN0021.jpg (image/jpeg)\u0026gt;, \u0026lt;InMemoryUploadedFile: Canon_PowerShot_S40.jpg (image/jpeg)\u0026gt;]}\u0026gt; \u0026lt;QueryDict: {'csrfmiddlewaretoken': ['ypDkNUtuh1l0oQZcBk4Nz48AEapw9rC0uLHydJIf6rRwqcavPqgo918hAjuQHUgE']}\u0026gt;\rform = PhotoForm(post_request or None, files_request or None)\rfiles = request.FILES.getlist('images') # returns files: [\u0026lt;InMemoryUploadedFile: DSCN0021.jpg (image/jpeg)\u0026gt;, \u0026lt;InMemoryUploadedFile: Canon_PowerShot_S40.jpg (image/jpeg)\u0026gt;]\rif form.is_valid():\ruser = request.user\rfor f in files:\rimg = Image.open(f) # returns \u0026lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=480x360 at 0x1ED0CCC6280\u0026gt;\rtry:\rgeotags = get_geotagging(img._getexif())\rgeoimage = ImageUpload(user=user, image=f)\rgeoimageimg_upload.image_url = geoimage.image.url geoimage.geom = Point(get_coordinates(geotags)) # X is longitude, Y is latitude, Point(X,Y) ; returns SRID=4326;POINT (11.88454 43.46708)\rgeoimage.save()\rexcept:\rnongeoimage = Photos(user=user,image=f)\rnongeoimage.image_url = nongeoimage.image.url\rnongeoimage.save()\relse:\rprint(\u0026quot;Form invalid\u0026quot;)\rreturn redirect('home')\relse:\rImageform = PhotoForm()\rreturn render(request, \u0026quot;GisMap/home.html\u0026quot;, {'Title': \u0026quot;Home Page\u0026quot;, \u0026quot;image_form\u0026quot;: ImageForm})\r in home.html\n\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label for=\u0026quot;note-image\u0026quot;\u0026gt;\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;images\u0026quot; class=\u0026quot;form-control-file\u0026quot; id=\u0026quot;note-image\u0026quot; multiple\u0026gt;\r\u0026lt;/div\u0026gt;\r ","date":1621857354,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621857354,"objectID":"358b17730b7a6c42374df40ddf72985c","permalink":"https://amanbagrecha.github.io/post/django/django-image-upload/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/django/django-image-upload/","section":"post","summary":"Project setup create project\ndjango-admin startproject login_boiler_plate\rcreate app python manage.py startapp GisMap\rcreate superuser python manage.py createsuperuser\r in settings.py\nINSTALLED_APPS = [\r...\r'GisMap',\r]\rMEDIA_ROOT = os.","tags":[],"title":"Django How to: Upload Multiple Image","type":"post"},{"authors":[],"categories":["DRF"],"content":"\rWhat will you learn Too Long; Didn\u0026rsquo;t Read \n   Markdown Less     DRF Create API end points for CRUD   Token Authentication Add security and authorised access   Fetch API calls Consume API from front-end   Password Reset Send email to reset your forgotton password     1. Step one : Basic Django Project setup Create virtual environment\nconda create --name djangoEnv\r Activate the environment\nconda activate djangoEnv\r Install the dependencies\nconda install django\r Now, in your command line\ncreate project django-admin startproject tutorial\ncreate app python manage.py startapp Accountsapp\ncreate superuser python manage.py createsuperuser\nNow that we have the project and app installed your structure should look like this (insert picture here)\nRegister the app in file as follows\nIn settings.py\nInstalled_apps = [ 'Accountsapp.apps.AccountsappConfig',\r...\r]\r We now create our own custom model named MyAccounts\nIn models.py\nfrom django.db import models\rfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager\rfrom django.conf import settings\rfrom django.db.models.signals import post_save\rfrom django.dispatch import receiver\rfrom rest_framework.authtoken.models import Token\rclass MyAccountManager(BaseUserManager):\rdef create_user(self, email, username, password=None):\rif not email:\rraise ValueError('Users must have an email address')\rif not username:\rraise ValueError('Users must have a username')\ruser = self.model(\remail=self.normalize_email(email),\rusername=username,\r)\ruser.set_password(password)\ruser.save(using=self._db)\rreturn user\rdef create_superuser(self, email, username, password):\ruser = self.create_user(\remail=self.normalize_email(email),\rpassword=password,\rusername=username,\r)\ruser.is_admin = True\ruser.is_staff = True\ruser.is_superuser = True\ruser.save(using=self._db)\rreturn user\r# creating custom model of \u0026quot;User\u0026quot; base model. class MyAccount(AbstractBaseUser):\remail = models.EmailField(verbose_name=\u0026quot;email\u0026quot;, max_length=60, unique=True)\rusername = models.CharField(max_length=30, unique=True)\rdate_joined\t= models.DateTimeField(verbose_name='date joined', auto_now_add=True)\rlast_login\t= models.DateTimeField(verbose_name='last login', auto_now=True)\ris_admin\t= models.BooleanField(default=False)\ris_active\t= models.BooleanField(default=True)\ris_staff\t= models.BooleanField(default=False)\ris_superuser\t= models.BooleanField(default=False)\rUSERNAME_FIELD = 'email' # username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.\rREQUIRED_FIELDS = ['username'] objects = MyAccountManager()\rdef __str__(self):\rreturn self.email\r# For checking permissions. to keep it simple all admin have ALL permissons\rdef has_perm(self, perm, obj=None):\rreturn self.is_admin\r# Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)\rdef has_module_perms(self, app_label):\rreturn True\r To tell django we are overwriting the default user model, we do the following\nIn settings.py\nAUTH_USER_MODEL = Accounts.MyAccounts\r Now we makemigrates to register the model in our database\npython manage.py makemigrations\rpython manage.py migrate\r And for the model to be visible in admin section we do the following\nIn admin.py\nfrom django.contrib import admin\rfrom .models import MyAccount\radmin.site.register(MyAccount) # Register your models here.\r For now the our project is setup. We move to Django Rest Framework setup\n2. Setup Django Rest Framework with Authentication Install dependeny\nconda install djangorestframework\r Like any other app, django rest framework is also an app. so we add it to the list of installed apps. We additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application\nIn settings.py\nINSTALLED_APPS = [\r# my apps\r'Accountsapp.apps.AccountsappConfig',\r# restframework\r'rest_framework',\r'rest_framework.authtoken',\r...\r]\r We are going to be using Token Authentication in this application. DRF documentation recommends it as the default. Let Us setup the Default authentication class before actually utilising it.\nIn settings.py\nREST_FRAMEWORK¬†=¬†{\r'DEFAULT_AUTHENTICATION_CLASSES':¬†[\r'rest_framework.authentication.TokenAuthentication',\r]\r}\r The last thing before we actually start writing code is to perform migration. The¬†rest_framework.authtoken¬†app provides Django database migrations.\nAs done previously on command line\npython manage.py makemigrations\rpython manage.py migrate\r We have completed the logistics for setting up DRF\n3. Building CRUD application We would first create a folder called api inside our to seperate codebase for API and vanila CRUD\nInside API folder create four files,\n __init__.py serializers.py views.py urls.py  In serializers.py\nfrom rest_framework import serializers from Accountsapp.models import MyAccount # import our custom model\r# provide fields in meta, expression and in MyAccount. for admin page login and edit, is_admin and is_staff should be true\rclass RegistrationSerializer(serializers.ModelSerializer):\r# additional fields password2 = serializers.CharField(style={'input_type': 'password'}, write_only=True)\ris_superuser =serializers.BooleanField(write_only=True)\rclass Meta:\rmodel = MyAccount\r# mention the fields you want to display when request is sent. fields = ['id','email', 'username', 'password', 'password2', 'is_superuser']\rextra_kwargs = {\r'password': {'write_only': True}, # tells django to not display the password for others to see\r}\tdef\tsave(self):\raccount = MyAccount(\remail=self.validated_data['email'],\rusername=self.validated_data['username'],\r# is_admin=self.validated_data['is_admin'],\ris_superuser= self.validated_data['is_superuser'],\r)\rpassword = self.validated_data['password']\rpassword2 = self.validated_data['password2']\rif password != password2:\rraise serializers.ValidationError({'password': 'Passwords must match.'})\raccount.set_password(password)\raccount.save()\rreturn account\rclass UpdateSerializer(serializers.ModelSerializer):\rclass Meta:\rmodel = MyAccount\r# mention the fields you want to display when request is sent. fields = ['id', 'username', 'email']\rextra_kwargs = {\r'password': {'read_only': True}, # password cannot be edited from here\r}\r Note : Do not try to update the password from serializers. There is another technique which we will deal with in later section.\n The serializers in REST framework work very similarly to Django‚Äôs Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.\n In views.py\nfrom rest_framework import status\rfrom rest_framework.response import Response\rfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\rfrom django.contrib.auth import authenticate\rfrom rest_framework.authentication import TokenAuthentication\rfrom rest_framework.decorators import api_view, authentication_classes, permission_classes\rfrom . import serializers from Accountsapp.models import MyAccount\rfrom rest_framework.authtoken.models import Token\r# user views\rfrom django.http import JsonResponse\rfrom django.views.decorators.csrf import csrf_exempt\rfrom rest_framework.parsers import JSONParser\rfrom django.core.exceptions import ObjectDoesNotExist\rimport json\r# login {built-in django}\rfrom django.contrib.auth import login from django.contrib.auth.decorators import login_required\r# get all users\r@api_view([\u0026quot;GET\u0026quot;])\r@csrf_exempt\r@permission_classes([IsAuthenticated,])\r@authentication_classes([TokenAuthentication])\rdef get_users(request):\rtry:\ruser_profile = MyAccount.objects.all() serializer = serializers.RegistrationSerializer(user_profile, many=True)\rreturn Response( {'USER_PROFILE':serializer.data}, status= status.HTTP_200_OK)\rexcept ObjectDoesNotExist:\rreturn JsonResponse({'Response': 'You do not have authorization to access this page'}, status=status.HTTP_401_UNAUTHORIZED)\r# get given user\r@api_view(['GET'])\r@csrf_exempt\r@permission_classes([IsAuthenticated,])\r@authentication_classes([TokenAuthentication])\rdef get_given_user(request, pk):\rtry:\ruser_profile = MyAccount.objects.get(pk=pk)\rexcept ObjectDoesNotExist:\rreturn JsonResponse({\u0026quot;missing\u0026quot;: \u0026quot;The requested object does not exist\u0026quot;}, status=status.HTTP_404_NOT_FOUND)\rif request.method == 'GET': serializer = serializers.RegistrationSerializer(user_profile)\rtoken = Token.objects.get(user=user_profile).key\rreturn JsonResponse({'given_user_profile': serializer.data, 'token':token})\r# add user\r@csrf_exempt\r@api_view(['POST'])\rdef user_add_view(request):\rserializer = serializers.RegistrationSerializer( data=request.data)\rif serializer.is_valid():\raccount = serializer.save()\rtoken, _ = Token.objects.get_or_create(user=account)\rreturn Response(serializer.data, status=status.HTTP_201_CREATED, headers={'Authorization': 'Token ' + token.key})\rreturn Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r# update user\r@api_view([\u0026quot;PUT\u0026quot;,'GET'])\r@csrf_exempt\r@permission_classes([IsAuthenticated,])\r@authentication_classes([TokenAuthentication])\rdef update_user(request, pk):\rtry:\ruser_profile = MyAccount.objects.get(id=pk)\rexcept ObjectDoesNotExist:\rreturn Response({'response': \u0026quot;given object does not exist\u0026quot;}, status=status.HTTP_404_NOT_FOUND)\ruser = request.user\rtry:\rdata = {i:j for i,j in request.query_params.items()}\rprint(data)\rserializer = serializers.UpdateSerializer(user_profile, data=data)\rif serializer.is_valid():\ruser= serializer.save()\rtoken, _ = Token.objects.get_or_create(user=user)\rreturn Response({\u0026quot;response\u0026quot;: \u0026quot;success\u0026quot;, 'data' :serializer.data}, status=status.HTTP_201_CREATED, headers={'Authorization': 'Token ' + token.key})\rreturn Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\rexcept ObjectDoesNotExist as e:\rreturn JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\rexcept Exception:\rreturn JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r# delete user\r@api_view([\u0026quot;DELETE\u0026quot;,'GET']) @csrf_exempt\r@permission_classes([IsAuthenticated])\r@authentication_classes([TokenAuthentication])\rdef delete_user(request, pk):\rtry:\ruser_profile = MyAccount.objects.get(id=pk)\rexcept ObjectDoesNotExist:\rreturn JsonResponse({'response': \u0026quot;given object does not exist\u0026quot;}, safe=False, status=status.HTTP_404_NOT_FOUND)\ruser = request.user\rif user_profile != user: return JsonResponse({'response':\u0026quot;You don't have permission to delete the record.\u0026quot;}, safe=False, status=status.HTTP_401_UNAUTHORIZED)\rtry:\ruser_profile.delete() #retuns 1 or 0\rreturn JsonResponse({'user_delete': \u0026quot;record deleted\u0026quot;}, safe=False, status=status.HTTP_200_OK)\rexcept ObjectDoesNotExist as e:\rreturn JsonResponse({'error': str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)\rexcept Exception:\rreturn JsonResponse({'error': 'Something terrible went wrong'}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r# login view and get token\r@api_view([\u0026quot;POST\u0026quot;, ])\rdef drflogin(request):\remail = request.data.get(\u0026quot;email\u0026quot;)\rusername = request.data.get(\u0026quot;username\u0026quot;)\rpassword = request.data.get(\u0026quot;password\u0026quot;)\raccount = MyAccount.objects.filter(email=email) | MyAccount.objects.filter(username=username)\rif not account:\rreturn Response({\u0026quot;error\u0026quot;: \u0026quot;Login failed\u0026quot;}, status=status.HTTP_401_UNAUTHORIZED)\r# authenticate(email=email, password=password) # returns none if not authenticated\raccount = authenticate(email=account[0].email, password=password)\rtoken, _ = Token.objects.get_or_create(user=account)\rlogin(request,account) renderer= Response({\u0026quot;response\u0026quot; : \u0026quot;Successfully authenticated\u0026quot;, \u0026quot;pk\u0026quot;: account.pk, \u0026quot;username\u0026quot;: account.username, \u0026quot;token\u0026quot;: token.key }, template_name= \u0026quot;Accountsapp/loginuser.html\u0026quot;, headers={'Authorization': 'Token ' + token.key})\rreturn renderer\r Setup end points for our API\nIn views.py\nfrom django.urls import path, include\rfrom . import views as drf_views\rapp_name = 'Accountsapp'\rurlpatterns = [\rpath('drf_users/', drf_views.get_users, name= 'drf_users'),\rpath('drf_user/\u0026lt;int:pk\u0026gt;/', drf_views.get_given_user, name= 'drf_get_user'),\rpath('drf_updateuser/\u0026lt;int:pk\u0026gt;/', drf_views.update_user, name= 'drf_updateusers'),\rpath('drf_deleteuser/\u0026lt;int:pk\u0026gt;/', drf_views.delete_user, name= 'drf_deleteuser'),\rpath('drf_adduser/', drf_views.user_add_view, name= 'drf_adduser'),\rpath('drf_login/', drf_views.drflogin, name='drf_login'),\r]\r We first create users and then test delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions.\nPOST  REQUEST: ADD USER http://127.0.0.1:8000/drf_adduser/\r GET  REQUEST: GET USERS API end point\nhttp://127.0.0.1:8000/drf_users/\r Using curl and passing authorization token\ncurl --location --request GET 'http://127.0.0.1:8000/drf_users/' \\\r--header 'Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613'\r Using postman\nDEL  REQUEST: DELETE USER API end point\nhttp://127.0.0.1:8000/drf_deleteuser/\u0026lt;int:pk\u0026gt;\r Using curl and passing authorization token\ncurl --location --request DELETE 'http://127.0.0.1:8000/drf_deleteuser/21' \\\r--header 'Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4'\r Using postman\nPUT  REQUEST: UPDATE USER API end point\nhttp://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here\u0026amp;email=updated_email_here\r Using curl and passing authorization token\ncurl --location --request PUT 'http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl\u0026amp;email=rcbfl@gmail.com' \\\r--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\r using postman GET  REQUEST: GET USER API end point\nhttp://127.0.0.1:8000/drf_user/\u0026lt;int:pk\u0026gt;\r Using curl and passing authorization token\ncurl --location --request GET 'http://127.0.0.1:8000/drf_user/8' \\\r--header 'Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0'\r using postman\nFront end setup In root directory create folder templates\\Accountsapp\\ and create RegiserUser.html file in it. Create form field in the file as follows\n\u0026lt;form class=\u0026quot;form-horizontal\u0026quot; action=\u0026quot;\u0026quot; method=\u0026quot;post\u0026quot; id=\u0026quot;myForm\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt;\r{% csrf_token %}\r\u0026lt;!-- Name input--\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label class=\u0026quot;col-md-3 control-label\u0026quot; for=\u0026quot;username\u0026quot;\u0026gt;Name\u0026lt;/label\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-9\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;username\u0026quot; name=\u0026quot;username\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Your username\u0026quot; class=\u0026quot;form-control\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- Email input--\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label class=\u0026quot;col-md-3 control-label\u0026quot; for=\u0026quot;email\u0026quot;\u0026gt;Your E-mail\u0026lt;/label\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-9\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;email\u0026quot; name=\u0026quot;email\u0026quot; type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Your email\u0026quot; class=\u0026quot;form-control\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- password body --\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label class=\u0026quot;col-md-3 control-label\u0026quot; for=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-9\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Your password\u0026quot; class=\u0026quot;form-control\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- password body --\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label class=\u0026quot;col-md-3 control-label\u0026quot; for=\u0026quot;password2\u0026quot;\u0026gt;Password2\u0026lt;/label\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-9\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;password2\u0026quot; name=\u0026quot;password2\u0026quot; type=\u0026quot;password\u0026quot; placeholder=\u0026quot;confirm password\u0026quot; class=\u0026quot;form-control\u0026quot;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- superuser input --\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;label class=\u0026quot;col-md-3 control-label\u0026quot; for=\u0026quot;superuser\u0026quot;\u0026gt;Is superuser\u0026lt;/label\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-3\u0026quot;\u0026gt;\r\u0026lt;input id=\u0026quot;issuperuser\u0026quot; name=\u0026quot;issuperuser\u0026quot; type=\u0026quot;checkbox\u0026quot; class=\u0026quot;form-control\u0026quot; \u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;!-- Form actions --\u0026gt;\r\u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;col-md-6 text-left\u0026quot;\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary btn-lg\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/fieldset\u0026gt;\r\u0026lt;/form\u0026gt;\r Once the form is created, we now need to take the input from the form and send to the register user API drf_adduser/.\nIn RegisterUser.html\n\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt;\rfunction getCookie(name) {\rvar cookieValue = null;\rif (document.cookie \u0026amp;\u0026amp; document.cookie !== '') {\rvar cookies = document.cookie.split(';');\rfor (var i = 0; i \u0026lt; cookies.length; i++) {\rvar cookie = cookies[i].trim();\r// Does this cookie string begin with the name we want?\rif (cookie.substring(0, name.length + 1) === (name + '=')) {\rcookieValue = decodeURIComponent(cookie.substring(name.length + 1));\rbreak;\r}\r}\r}\rreturn cookieValue;\r}\rvar csrftoken = getCookie('csrftoken');\rfunction fetchcall(event) {\revent.preventDefault();\rconsole.log('form submitted');\rvar username = document.getElementById(\u0026quot;username\u0026quot;).value;\rvar email = document.getElementById(\u0026quot;email\u0026quot;).value;\rvar password = document.getElementById(\u0026quot;password\u0026quot;).value;\rvar password2 = document.getElementById(\u0026quot;password2\u0026quot;).value;\rvar issuperuser = document.getElementById(('issuperuser')).checked;\rconsole.log(issuperuser)\rvar url = '/drf_adduser/';\rfetch(url, {\rmethod:'POST',\rheaders:{\r'Content-type':'application/json',\r'X-CSRFToken':csrftoken,\r},\rbody:JSON.stringify({\r'email':email,\r'username':username,\r\u0026quot;password\u0026quot;:password,\r\u0026quot;password2\u0026quot;:password2,\r\u0026quot;is_superuser\u0026quot;: issuperuser\r})\r}\r).then(function(response){\rstore_response= response;\rreturn response.json();\r}).then(function(data){\rstore_data =JSON.stringify(data);\rdocument.getElementById(\u0026quot;message\u0026quot;).innerHTML= store_data;\r}).catch(function(error){\rconsole.error(error);\r});\r}\rvar myForm = document.getElementById(\u0026quot;myForm\u0026quot;);\rconsole.log(username, password, myForm);\rmyForm.addEventListener('submit', fetchcall);\r\u0026lt;/script\u0026gt;\r To make this work in front-end, we need to register the file to Accountsapp/views.py\ndef register_user(request):\r# if request.user.is_authenticated:\rreturn render(request, \u0026quot;Accountsapp/RegisterUser.html\u0026quot;, {'Title': \u0026quot;Register new user\u0026quot;})\r ","date":1621849438,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621849438,"objectID":"acb3f40a2c4ddf66f721a5ff94fad7f7","permalink":"https://amanbagrecha.github.io/post/django/crud-in-django-rest-framework/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/django/crud-in-django-rest-framework/","section":"post","summary":"What will you learn Too Long; Didn\u0026rsquo;t Read \n   Markdown Less     DRF Create API end points for CRUD   Token Authentication Add security and authorised access   Fetch API calls Consume API from front-end   Password Reset Send email to reset your forgotton password     1.","tags":["Django"],"title":"Full Fledged CRUD application using DRF and Token Authentication","type":"post"},{"authors":[],"categories":["DRF"],"content":"Main steps In this blog we create PDF using report lab and email it to the user using gmail SMTP service. All actions are performed in Django.\nStep 1 : create view to serialise data The createInspectionReport is something not to worry about. It is just a form which takes in input with users, emailaddress. myresponse is a dictionary to store response and return with serialised data. The send handles sending creating pdf and emailing to the emailaddress of the users. PDF generation is done using reportlab.\nSUCCESS = 'success'\rERROR = 'error'\rmessage_list = ['response', 'status', 'message'] # eg: [\u0026quot;success\u0026quot;, 201, \u0026quot;successfully upload the file\u0026quot;]\r@csrf_exempt\r@api_view(['POST',])\rdef CreateInspectionReport(request):\rmyresponse = {k: [] for k in message_list}\rtry:\rmyData = request.data.copy()\r# print(myData)\rmyData['user'] = request.user.id #get the user id\rmyData['EmailAddress'] = myData['EmailAddress'] or request.user.email # user enters the email or take from the account\rif not myData['EmailAddress']: # custom validation and response\rRequestResponse(myresponse,ERROR,status.HTTP_400_BAD_REQUEST,{\u0026quot;Email Address\u0026quot; : [\u0026quot;This field cannot be blank\u0026quot;] })\rreturn Response(data = myresponse)\rserializer = serializers.AddInspectionReportSerializer( data=myData) # serialier the data\rif serializer.is_valid():\rtry:\rsend(**myData.dict()) # create pdf and send email\rexcept Exception as e:\rprint(e)\rRequestResponse(myresponse,ERROR,status.HTTP_400_BAD_REQUEST,{\u0026quot;Email\u0026quot; : [\u0026quot;Could not send mail!\u0026quot;] })\rreturn Response(data = myresponse)\raccount = serializer.save()\rRequestResponse(myresponse,SUCCESS,status.HTTP_201_CREATED, {\u0026quot;Success\u0026quot;: [f\u0026quot;Inspection Report e-mailed to {account.EmailAddress}!\u0026quot;] })\rmessages.success(request, f'Inspection Report e-mailed to {account.EmailAddress}!')\r# print(serializer)\rreturn Response(myresponse, )\rRequestResponse(myresponse,ERROR,status.HTTP_400_BAD_REQUEST,serializer.errors)\rreturn Response(data = myresponse)\rexcept Exception as e:\rprint(e)\rRequestResponse(myresponse,ERROR,status.HTTP_500_INTERNAL_SERVER_ERROR, {\u0026quot;Error\u0026quot;: [\u0026quot;Internal Server Error\u0026quot;]})\rreturn Response(data= myresponse)\r step 2: create pdf def generate_pdf(**Mydata):\ry = 700\rbuffer = io.BytesIO() # in memory create pdf\rp = canvas.Canvas(buffer, pagesize=letter)\rp.setFont('Helvetica', 14)\rp.drawString(220,y, Mydata['InspectionTitle'])\rp.drawString(450, y, \u0026quot;Date:\u0026quot; + timezone.now().strftime('%Y-%b-%d'))\rp.line(30, 675, 550, 675)\rp.drawString(220, y-300, \u0026quot;Time of Inspection: \u0026quot; + str(Mydata['InspectionTime']))\rp.drawString(220, y-200, \u0026quot;Estimated Replacement Cost: \u0026quot; + str(Mydata['EstReplacementCost']))\rp.showPage()\rp.save()\rpdf = buffer.getvalue()\rbuffer.close()\rreturn pdf\r step 3: send email using report lab # settings.py\rEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\rEMAIL_HOST = \u0026quot;smtp.gmail.com\u0026quot;\rEMAIL_HOST_USER = 'your_email@gmail.com'\rEMAIL_HOST_PASSWORD = 'your_password'\rEMAIL_PORT = 587\rEMAIL_USE_TLS = True\r# views.py\rdef send(**Mydata):\rpdf = generate_pdf(**Mydata)\rmsg = EmailMessage(Mydata['InspectionTitle'], \u0026quot; Your Inspection Report is ready! \u0026quot;, settings.EMAIL_HOST_USER, to=[Mydata['EmailAddress']])\rmsg.attach(f\u0026quot;{Mydata['InspectionTitle']}.pdf\u0026quot;, pdf, 'application/pdf')\rmsg.content_subtype = \u0026quot;html\u0026quot;\rresp = msg.send()\rprint(\u0026quot;resp:\u0026quot; , resp)\r ","date":1621814400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621867899,"objectID":"289a2685a03073bda90bbd566e602118","permalink":"https://amanbagrecha.github.io/post/django/pdf-and-email-creation/","publishdate":"2021-05-24T00:00:00Z","relpermalink":"/post/django/pdf-and-email-creation/","section":"post","summary":"Main steps In this blog we create PDF using report lab and email it to the user using gmail SMTP service. All actions are performed in Django.\nStep 1 : create view to serialise data The createInspectionReport is something not to worry about.","tags":[],"title":"Django rest framework PDF creation and email via gmail SMTP and reportLab","type":"post"},{"authors":[],"categories":[],"content":"Main steps In this small demo-blog we look into how to make polygon selections and calculate the area of that polygon on-the-fly. We use openlayers v6 to add gis functionality.\nStep 1: Openlayers requires you to add these cdns to add their functionality into our application.\nlink necessary cdns \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\u0026quot; type=\u0026quot;text/css\u0026quot;\u0026gt;\r\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r We are using openlayers to render the request response. since the output of the WFS request is json, we create a new layer with vector source and format as geojson. the strategy:ol.loadingstrategy.bbox tells openlayers to only load features within the bbox. so if we move to different location, only features within that bbox will appear.\nvar geoserver_ip = 'http://120.0.0.1'\rvar geoserver_port = '8080'\rvar myFlSource = new ol.source.Vector({\rformat: new ol.format.GeoJSON(),\rurl: function (extent){\rreturn ( geoserver_ip +':' + geoserver_port + '/geoserver/dronnav/ows?service=WFS\u0026amp;version=1.1.0\u0026amp;request=GetFeature\u0026amp;typeName=dronnav%3Aflorida_bp\u0026amp;maxFeatures=10000\u0026amp;outputFormat=application/json\u0026amp;srsname=EPSG:4326\u0026amp;' + 'bbox=' + extent.join(',') + ',EPSG:4326' );\r},\rstrategy:ol.loadingstrategy.bbox,\r});\r We perform WFS request from geoserver to get our layer florida_bp in this case. The parameters are as explained as follows\n  service=WFS :\n  typename=workspace:florida_bp :\n  version=1.1.0 :\n  maxFeatures = 10000 : since WFS request is computationaly expensive, we restrict to only load 10000 features.\n  request=GetFeature :\n  outputFormat=application/json :\n  srsname=EPSG:4326 :\n  bbox= :\n  var floridaLayer = new ol.layer.Vector({\rsource: myFlSource,\rstyle: new ol.style.Style({\rfill: new ol.style.Fill({\rcolor: 'rgba(1, 1, 255, .2)',\r}),\rstroke: new ol.style.Stroke({\rcolor: 'rgba(1, 1, 255, .5)',\rwidth: 2,\r}),\r}),\rminZoom: 16, // this will allows us to send request only when the zoom is atleast 16\r});\r Once the layer is defined, we need to add this layer to the map. We can either use map.addLayer(layername) or add to array in the map.\n// add basemap\rvar project_maplayer = new ol.layer.Tile({\rsource: new ol.source.XYZ({\rattributions: ['Powered by Esri',\r'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],\rattributionsCollapsible: false,\rurl: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\rmaxZoom: 23\r}),\rzIndex: 0\r});\r// add view with projection for the map\rvar project_view = new ol.View({\rprojection: 'EPSG:4326',\rcenter: [-81.80808208706726, 27.285095000261222],\rzoom: 7,\r});\r// define the map with all the layers created previously\rvar Projectmap = new ol.Map({\rlayers: [project_maplayer, floridaLayer],\roverlays: [overlay],\rtarget: 'project_map', // the div element `id` in html page\rview: project_view,\r});\r Get feature info on click /* style for selected feature on click */\rvar highlightStyle = new ol.style.Style({\rfill: new ol.style.Fill({\rcolor: '#f0b88b',\r}),\rstroke: new ol.style.Stroke({\rcolor: '#f0b88b',\rwidth: 3,\r}),\r});\r/* function for array sum */\rfunction getSum(total, num) {\rreturn total + Math.round(num);\r}\r/* function for calculating area of the polygon (feature) selected */\rfunction formatArea (polygon){\rvar area = ol.sphere.getArea(polygon.getGeometry().transform('EPSG:4326', 'EPSG:3857')); // transform to projected coordinate system.\rvar output;\routput = Math.round(area * 100*10.7639) / 100 ; //in ft2\rpolygon.getGeometry().transform('EPSG:3857', 'EPSG:4326' ) //convert back to geographic crc\rreturn output;\r}\r/* select ploygon the feature and get area and store the features */\rvar selected = []; // contains all features\rvar selected_area = []; // contains area of feature, one-to-one\rProjectmap.on('singleclick', function (e) {\rProjectmap.forEachFeatureAtPixel(e.pixel, function (f, l) {\rvar mycoordinate = e.coordinate\rstoref = f\r/* if click is on polygon, then select the feature */\rif ( f.getGeometry() instanceof ol.geom.MultiPolygon ) {\rvar selIndex = selected.indexOf(f);\r// console.log(selIndex)\rif (selIndex \u0026lt; 0) {\rselected.push(f);\rselected_area.push( formatArea(f) ); // formatArea function returns the area in ft2\rf.setStyle(highlightStyle);\r} else {\rselected.splice(selIndex, 1);\rselected_area.splice( selIndex, 1);\rf.setStyle(undefined);\r}\r}\r})\r/* update the tags with no of selected feature and total area combined */\rdocument.getElementById('status-selected').innerHTML = '\u0026amp;nbsp;' + selected.length + ' selected features';\rdocument.getElementById('status-selected_area').innerHTML = '\u0026amp;nbsp;' + selected_area.reduce(getSum, 0) + ' ft\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;';\r});\r Final comments How we are able to select polygon from our florida layer and on click it also computes the area of selection in meters.\n","date":1621814400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621867485,"objectID":"5b67cf10fb9f49f2ef304c7a0f7c09f4","permalink":"https://amanbagrecha.github.io/post/openlayers/polygon-selection-and-area-calculating-in-openlayers/","publishdate":"2021-05-24T00:00:00Z","relpermalink":"/post/openlayers/polygon-selection-and-area-calculating-in-openlayers/","section":"post","summary":"Select multiple polygons (parcels) and calculate area on the fly in openlayers","tags":[],"title":"Polygon Selection and  Area Calculating in Openlayers","type":"post"},{"authors":["Aman Bagrecha"],"categories":["Django"],"content":"Overview  Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with django.contrib.gis to the installed apps. An additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file.  # for window os\rimport os\rimport posixpath\rif os.name == 'nt':\rimport platform\rOSGEO4W = r\u0026quot;C:\\OSGeo4W\u0026quot;\rif '64' in platform.architecture()[0]:\rOSGEO4W += \u0026quot;64\u0026quot;\rassert os.path.isdir(OSGEO4W), \u0026quot;Directory does not exist: \u0026quot; + OSGEO4W\ros.environ['OSGEO4W_ROOT'] = OSGEO4W\ros.environ['GDAL_DATA'] = OSGEO4W + r\u0026quot;\\share\\gdal\u0026quot;\ros.environ['PROJ_LIB'] = OSGEO4W + r\u0026quot;\\share\\proj\u0026quot;\ros.environ['PATH'] = OSGEO4W + r\u0026quot;\\bin;\u0026quot; + os.environ['PATH']\r Setup the database to postgis instead of postgresql.  # in settings.py file\rDATABASES = {\r'default': {\r'ENGINE': 'django.contrib.gis.db.backends.postgis',\r'NAME': 'database_name_here',\r'USER': 'postgres',\r'PASSWORD': 'password_here',\r'HOST': 'localhost',\r'PORT': '5432',\r},\r}\r We now create a model to upload geotagged images and store the geolocation as point information into the database. For demo purposes we can have image and geom as mandatory field, rest can be blank.  from django.db import models\rfrom django.contrib.auth.models import User # our user model\rfrom django.contrib.gis.db import models # geodjango import\rfrom django.utils import timezone # to capture date created from metadata\rclass ImageUpload(models.Model):\ruser = models.ForeignKey(User, on_delete= models.SET_DEFAULT, default=1)\rimage = models.ImageField( null=False, blank=False, upload_to = 'geotaggedimages/') date_created = models.DateTimeField(default=timezone.now, null=True) # date and time image is uploaded\rimage_url = models.URLField(max_length=250, null=True, blank=True) # grab the url from s3 bucket on save\rdate_captured = models.DateTimeField(null=True, blank = True) # date and time image was captured\rgeom = models.PointField( null=True, blank=False) # grab the geolocation from image and store in database as POINT field\rclass Meta:\rverbose_name = 'geotagged images'\rverbose_name_plural = 'geotagged images'\rdef __str__(self):\rreturn str(self.image.name)\r We now run migrations and migrate the model using .\\manage.py makemigrations and .\\manage.py migrate. We now create our view to accept POST/AJAX request from our frontend  from django.shortcuts import render\rfrom django.contrib.auth.decorators import login_required\rfrom django.contrib.auth import login from django.contrib import messages\rfrom .models import ImageUpload\rfrom django.contrib.gis.geos import Point\rfrom django.http import JsonResponse\rfrom PIL import Image\rfrom PIL.ExifTags import GPSTAGS\rfrom PIL.ExifTags import TAGS\rfrom datetime import datetime\r#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#\r# COURTESY OF https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3\rdef get_decimal_from_dms(dms, ref):\rdegrees = dms[0]\rminutes = dms[1] / 60.0\rseconds = dms[2] / 3600.0\rif ref in ['S', 'W']:\rdegrees = -degrees\rminutes = -minutes\rseconds = -seconds\rreturn round(degrees + minutes + seconds, 5)\rdef get_coordinates(geotags):\rlat = get_decimal_from_dms(geotags['GPSLatitude'], geotags['GPSLatitudeRef'])\rlon = get_decimal_from_dms(geotags['GPSLongitude'], geotags['GPSLongitudeRef'])\rreturn (lon, lat)\rdef get_geotagging(exif):\r\u0026quot;\u0026quot;\u0026quot;\r# 34853 is key for tag GPSInfo\r\u0026quot;\u0026quot;\u0026quot;\rif not exif:\rraise ValueError(\u0026quot;No EXIF metadata found\u0026quot;)\rgeotagging = {}\rfor (idx, tag) in TAGS.items():\rif tag == 'GPSInfo':\rif idx not in exif:\rraise ValueError(\u0026quot;No EXIF geotagging found\u0026quot;)\rfor (key, val) in GPSTAGS.items():\rif key in exif[idx]:\rgeotagging[val] = exif[idx][key]\rreturn geotagging\r#________________________________________END OF FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#\t@login_required(login_url='login')\rdef home_page(request):\ruser = request.user # get logged in user\rif request.is_ajax():\rfiles = request.FILES.getlist('images') # returns files: eg: [TemporaryUploadedFile: human15-28.png (image/png), ]\rmessage = []\rfor f in files: # loop over all images\rtry:\rwith Image.open(f) as img:\rexif = img._getexif()\rgeotags = get_geotagging(exif) # this decides if image is geotagged or nongeotagged\rget_corrd = get_coordinates(geotags)\rprint(\u0026quot;get_corrd\u0026quot;,get_corrd)\rgeoimage = ImageUpload(user=user, image=f) # create an instance of model\rgeoimage.geom = Point(get_corrd) # X is longitude, Y is latitude, Point(X,Y) ; returns SRID=4326;POINT (11.88454 43.46708) [WKT format]\rgeoimage.save()\rmessage.append(f\u0026quot;file {f} uploaded to images/\u0026quot;)\rexcept Exception as e:\rmessage.append(f\u0026quot;{e}\u0026quot;)\rreturn JsonResponse({\u0026quot;status\u0026quot;: message}, safe=False) #redirect('home')\relse:\rreturn render(request, \u0026quot;GisMap/home.html\u0026quot;, {'Title': \u0026quot;Home Page\u0026quot;}) # name of my app is GisMap, and home.html is the fornt-end from where images are uploaded.\r  These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to use the geometry.\n   ","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://amanbagrecha.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Overview  Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional.","tags":["Geodjango","postgis","django","osGeo4W"],"title":"Upload multiple geotagged images and store POINTS in postgresql database using geodjango","type":"post"},{"authors":[],"categories":null,"content":"Slides will be added in a few ways:\n","date":1588338000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588338000,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://amanbagrecha.github.io/talk/analysis-of-flood-prone-region-with-sar-imagery-using-gee/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/analysis-of-flood-prone-region-with-sar-imagery-using-gee/","section":"event","summary":"Technical presentation on Analysis of Flood Prone Region with SAR Imagery, a case study for Assam.","tags":[],"title":"Analysis of Flood Prone Region with SAR Imagery using GEE","type":"event"},{"authors":["Yashas Venkatesh","Aman Bagrecha","Dhanush S"],"categories":null,"content":"","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583020800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://amanbagrecha.github.io/publication/conference-paper/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Feasibility Study of Floating Solar Panels over Lakes in Bengaluru City presented at Second ASCE India Conference on ‚ÄúChallenges of Resilient and Sustainable Infrastructure Development in Emerging Economies","tags":["ASCE","FSPV","SOLAR"],"title":"Feasibility Study of Floating Solar Panels over Lakes in Bengaluru City","type":"publication"},{"authors":null,"categories":null,"content":"","date":1582761600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582761600,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://amanbagrecha.github.io/project/external-project/","publishdate":"2020-02-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"Create API end points for DRF-CRUD and add security layer using Token Authentication.","tags":["DRF"],"title":"Django-rest-framework CRUD Token Authetication Application","type":"project"},{"authors":["Aman Bagrecha"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://amanbagrecha.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Introduction to Natural Language Processing By Aman Bagrecha\n What is Natural Language?  Those Languages which are not artificial or computer generated :) Natural Language is what Humans communicate through Eg. English, Hindi, Kannada, French‚Ä¶   What is Natural Language Processing?  Enabling computers to understand Natural Language. Data is the new oil! It has information hidden underneath. Only problem is it is not that simply to extract information.   Why is it complex?  Ambiguity in meaning of sentence  \u0026ndash; ‚ÄúI fought with my brother‚Äù Did he fight along with his brother or against him?\n New words are added everyday Position of adverb/verb can change meaning or mean nothing  \u0026ndash; ‚ÄúHe‚Äôs working hard‚Äù vs ‚ÄúHe‚Äôs hard working‚Äù vs ‚Äúhard he‚Äôs working‚Äù\n Same word can have different meaning based on context  \u0026ndash; Aditya is a friend I can always bank on for help\n\u0026ndash; Aditya is going to the bank\n Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\r Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\r Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}}\r{{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}\r  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\r  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://amanbagrecha.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"Introduction to Natural Language Processing.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Project Setup  A project to demostrate rest-api crud operation in node-express application. Node and express allows for easy api building and super easy to create application.\n create package.json\nnpm init -y\r install express\nnpm install --save express\r in index.js file\nimport express from 'express'; // both are same (works with node 14.5 and above..)\rconst express = require('express'); // old version\r To enable the first line of code for above we have to make changes in package.json as follows\n\u0026quot;type\u0026quot; : \u0026quot;module\u0026quot;,\r run server\nnpm start\r install nodemon package to refresh the server on each save\nnpm install --save-dev nodemon\r In package.json add under scripts. This is done to start application using nodemon.\n\u0026quot;start\u0026quot;: \u0026quot;nodemon index.js\u0026quot;;\r For modularity we create another folder where we would store all our routes create a folder routes/users.js which has the following basic template.\nimport express from 'express';\r// Use the express.Router class to create modular, mountable route handlers\rconst router = express.Router();\r// routes here\r// eg: router.get(...)\r// export the app `router` so that it can be imported in index.js\rexport default router;\r Now import the exported router app to index.js as follows\nimport router from './routes/users.js';\rapp.use(\u0026quot;/people\u0026quot;, router);\r now\nrouter.post('/', (req, res) =\u0026gt; {\r// when making post request, we have access to req.body\ruser_list.push(req.body); // user_list is list of dictoriay contianing all users\r})\r  Next step: Setting up mongo db database npm install mongoose\nimport mongoose from 'mongoose';\r const CONNECTION_URL = \u0026quot;mongodb+srv://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@cluster0.frghl.mongodb.net/\u0026lt;data_basename\u0026gt;?retryWrites=true\u0026amp;w=majority\u0026quot;;\rmongoose.connect(CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology: true })\r.then(() =\u0026gt; app.listen(PORT, () =\u0026gt; console.log(`Server Running on Port: http://localhost:${PORT}`))) // what to do when we connection is made\r.catch((error) =\u0026gt; console.log(`${error} did not connect`)); // what if it goes wrong\rmongoose.set('useFindAndModify', false);\r We now create schema for our database. Since this is basic crud, we want username, email. we do so by creating user_model.js file inside models folder in root directory.\nimport mongoose from 'mongoose';\rconst postSchema = mongoose.Schema({\rfirstname: String,\rlastname: String,\remail: { // required field\rtype: String,\rrequired: true\r},\rcreatedAt: { type: Date,\rdefault: new Date(),\r},\r})\rvar user_model = mongoose.model('user_model', postSchema);\rexport default user_model;\r After exporting the model, we now import in our functions.js file.\nError messages\nimport { Mongoose } from 'mongoose';\r^^^^^^^^\rSyntaxError: Named export 'Mongoose' not found. The requested module 'mongoose' is a CommonJS module, which may not support all module.exports as named exports.\rCommonJS modules can always be imported via the default export, for example using:\rimport pkg from 'mongoose';\rconst { Mongoose } = pkg;\r ","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://amanbagrecha.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"A how-to guide to build node express CRUD API.","tags":["Node Express","API","CRUD"],"title":"CRUD Application using node express api","type":"project"},{"authors":["Aman Bagrecha","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://amanbagrecha.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://amanbagrecha.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]