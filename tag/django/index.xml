<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django | Aman Bagrecha</title>
    <link>https://amanbagrecha.github.io/tag/django/</link>
      <atom:link href="https://amanbagrecha.github.io/tag/django/index.xml" rel="self" type="application/rss+xml" />
    <description>Django</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 24 May 2021 15:13:58 +0530</lastBuildDate>
    <image>
      <url>https://amanbagrecha.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Django</title>
      <link>https://amanbagrecha.github.io/tag/django/</link>
    </image>
    
    <item>
      <title>Full Fledged CRUD application using DRF and Token Authentication</title>
      <link>https://amanbagrecha.github.io/post/django/crud-in-django-rest-framework/</link>
      <pubDate>Mon, 24 May 2021 15:13:58 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/post/django/crud-in-django-rest-framework/</guid>
      <description>&lt;hr style=&#34;border:1px solid lightgray&#34;&gt; &lt;/hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;what-will-you-learn&#34;&gt;What will you learn&lt;/h2&gt;
&lt;p&gt;&lt;span style=&#34;color: grey;font-size: 18px;&#34;&gt;Too Long; Didn&amp;rsquo;t Read &lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;Less&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DRF&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Create API end points for CRUD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Token Authentication&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Add security and authorised access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fetch API calls&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Consume API from front-end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Password Reset&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Send email to reset your forgotton password&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-step-one--basic-django-project-setup&#34;&gt;1. Step one : Basic Django Project setup&lt;/h2&gt;
&lt;p&gt;Create virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda create --name djangoEnv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Activate the environment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda activate djangoEnv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, in your command line&lt;/p&gt;
&lt;p&gt;create project &lt;code&gt;django-admin startproject tutorial&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;create app &lt;code&gt;python manage.py startapp Accountsapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;create superuser &lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the project and app installed your structure should look like this (insert picture here)&lt;/p&gt;
&lt;p&gt;Register the app in  file as follows&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Installed_apps = [ 
    &#39;Accountsapp.apps.AccountsappConfig&#39;,
    ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now create our own custom model named &lt;em&gt;&lt;strong&gt;MyAccounts&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;models.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token


class MyAccountManager(BaseUserManager):
	def create_user(self, email, username, password=None):
		if not email:
			raise ValueError(&#39;Users must have an email address&#39;)
		if not username:
			raise ValueError(&#39;Users must have a username&#39;)


		user = self.model(
			email=self.normalize_email(email),
			username=username,
		)

		user.set_password(password)
		user.save(using=self._db)
		return user

	def create_superuser(self, email, username, password):
		user = self.create_user(
			email=self.normalize_email(email),
			password=password,
			username=username,
			
		)
		user.is_admin = True
		user.is_staff = True
		user.is_superuser = True
		user.save(using=self._db)
		return user

# creating custom model of &amp;quot;User&amp;quot; base model. 
class MyAccount(AbstractBaseUser):
	email 					= models.EmailField(verbose_name=&amp;quot;email&amp;quot;, max_length=60, unique=True)
	username 				= models.CharField(max_length=30, unique=True)
	date_joined				= models.DateTimeField(verbose_name=&#39;date joined&#39;, auto_now_add=True)
	last_login				= models.DateTimeField(verbose_name=&#39;last login&#39;, auto_now=True)
	is_admin				= models.BooleanField(default=False)
	is_active				= models.BooleanField(default=True)
	is_staff				= models.BooleanField(default=False)
	is_superuser			= models.BooleanField(default=False)


	USERNAME_FIELD = &#39;email&#39;   # username_field is the one which should be unique and will be compared by django for not creating multiple users with same email.

	REQUIRED_FIELDS = [&#39;username&#39;] 

	objects = MyAccountManager()

	def __str__(self):
		return self.email

	# For checking permissions. to keep it simple all admin have ALL permissons
	def has_perm(self, perm, obj=None):
		return self.is_admin

	# Does this user have permission to view this app? (ALWAYS YES FOR SIMPLICITY)
	def has_module_perms(self, app_label):
		return True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To tell django we are overwriting the default user model, we do the following&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AUTH_USER_MODEL = Accounts.MyAccounts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we makemigrates to register the model in our database&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for the model to be visible in admin section we do the following&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;admin.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib import admin
from .models import MyAccount

admin.site.register(MyAccount) # Register your models here.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now the our project is setup. We move to Django Rest Framework setup&lt;/p&gt;
&lt;h2 id=&#34;2-setup-django-rest-framework-with-authentication&#34;&gt;2. Setup Django Rest Framework with Authentication&lt;/h2&gt;
&lt;p&gt;Install dependeny&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install djangorestframework
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like any other app, django rest framework is also an app. so we add it to the list of installed apps. 
We additionally add authtoken app for user authentication which we are shortly going to intergrate in our CRUD application&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
    # my apps
    &#39;Accountsapp.apps.AccountsappConfig&#39;,
    # restframework
    &#39;rest_framework&#39;,
    &#39;rest_framework.authtoken&#39;,
    ...
    
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to be using Token Authentication in this application. DRF documentation recommends it as the default. 
Let Us setup the Default authentication class before actually utilising it.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;REST_FRAMEWORK = {
    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [
        &#39;rest_framework.authentication.TokenAuthentication&#39;,
        
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing before we actually start writing code is to perform migration. The &lt;code&gt;rest_framework.authtoken&lt;/code&gt; app provides Django database migrations.&lt;/p&gt;
&lt;p&gt;As done previously on command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have completed the logistics for setting up DRF&lt;/p&gt;
&lt;h2 id=&#34;3-building-crud-application&#34;&gt;3. Building CRUD application&lt;/h2&gt;
&lt;p&gt;We would first create a folder called &lt;strong&gt;api&lt;/strong&gt; inside our to seperate codebase for API and vanila CRUD&lt;/p&gt;
&lt;p&gt;Inside API folder create four files,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serializers.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;code&gt;serializers.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rest_framework import serializers 
from Accountsapp.models import MyAccount # import our custom model


# provide fields in meta, expression and in MyAccount. for admin page login and edit,  is_admin and is_staff should be true
class RegistrationSerializer(serializers.ModelSerializer):

    # additional fields 
	password2 = serializers.CharField(style={&#39;input_type&#39;: &#39;password&#39;}, write_only=True)
	is_superuser =serializers.BooleanField(write_only=True)
	
    class Meta:
		model = MyAccount
        # mention the fields you want to display when request is sent. 
		fields = [&#39;id&#39;,&#39;email&#39;, &#39;username&#39;, &#39;password&#39;, &#39;password2&#39;,  &#39;is_superuser&#39;]
		extra_kwargs = {
				&#39;password&#39;: {&#39;write_only&#39;: True},  # tells django to not display the password for others to see
		}	


	def	save(self):

		account = MyAccount(
					email=self.validated_data[&#39;email&#39;],
					username=self.validated_data[&#39;username&#39;],
					# is_admin=self.validated_data[&#39;is_admin&#39;],
					is_superuser= self.validated_data[&#39;is_superuser&#39;],
				)
		password = self.validated_data[&#39;password&#39;]
		password2 = self.validated_data[&#39;password2&#39;]
		if password != password2:
			raise serializers.ValidationError({&#39;password&#39;: &#39;Passwords must match.&#39;})
		account.set_password(password)
		account.save()
		return account


class UpdateSerializer(serializers.ModelSerializer):

	class Meta:
		model = MyAccount
		# mention the fields you want to display when request is sent. 
		fields = [&#39;id&#39;, &#39;username&#39;, &#39;email&#39;]
		extra_kwargs = {
				&#39;password&#39;: {&#39;read_only&#39;: True},  #  password cannot be edited from here
		}


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Do not try to update the password from serializers. There is another technique which we will deal with in later section.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rest_framework import status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.contrib.auth import authenticate
from rest_framework.authentication import TokenAuthentication
from rest_framework.decorators import api_view, authentication_classes, permission_classes

from . import serializers 
from Accountsapp.models import MyAccount
from rest_framework.authtoken.models import Token

# user views
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.parsers import JSONParser
from django.core.exceptions import ObjectDoesNotExist
import json

# login {built-in django}
from django.contrib.auth import login 
from django.contrib.auth.decorators import login_required



# get all users
@api_view([&amp;quot;GET&amp;quot;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def get_users(request):
    try:
        user_profile = MyAccount.objects.all() 
        serializer = serializers.RegistrationSerializer(user_profile, many=True)
        return Response( {&#39;USER_PROFILE&#39;:serializer.data}, status= status.HTTP_200_OK)
    except ObjectDoesNotExist:
        return JsonResponse({&#39;Response&#39;: &#39;You do not have authorization to access this page&#39;}, status=status.HTTP_401_UNAUTHORIZED)



# get given user
@api_view([&#39;GET&#39;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def get_given_user(request, pk):
    try:
        user_profile = MyAccount.objects.get(pk=pk)
    except ObjectDoesNotExist:
        return JsonResponse({&amp;quot;missing&amp;quot;: &amp;quot;The requested object does not exist&amp;quot;}, status=status.HTTP_404_NOT_FOUND)

    if request.method == &#39;GET&#39;:  
        serializer = serializers.RegistrationSerializer(user_profile)
        token = Token.objects.get(user=user_profile).key
        return JsonResponse({&#39;given_user_profile&#39;: serializer.data, &#39;token&#39;:token})
   


# add user
@csrf_exempt
@api_view([&#39;POST&#39;])
def user_add_view(request):
        serializer = serializers.RegistrationSerializer( data=request.data)
        if serializer.is_valid():
            account = serializer.save()
            token, _ = Token.objects.get_or_create(user=account)
            return Response(serializer.data, status=status.HTTP_201_CREATED,  headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



# update user
@api_view([&amp;quot;PUT&amp;quot;,&#39;GET&#39;])
@csrf_exempt
@permission_classes([IsAuthenticated,])
@authentication_classes([TokenAuthentication])
def update_user(request, pk):

    try:
        user_profile = MyAccount.objects.get(id=pk)
    except ObjectDoesNotExist:
        return Response({&#39;response&#39;: &amp;quot;given object does not exist&amp;quot;}, status=status.HTTP_404_NOT_FOUND)

    user = request.user
    try:
        data =  {i:j for i,j in request.query_params.items()}
        print(data)
        serializer = serializers.UpdateSerializer(user_profile, data=data)
        if serializer.is_valid():
            user= serializer.save()
            token, _ = Token.objects.get_or_create(user=user)
            return Response({&amp;quot;response&amp;quot;: &amp;quot;success&amp;quot;, &#39;data&#39; :serializer.data}, status=status.HTTP_201_CREATED,  headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    except ObjectDoesNotExist as e:
        return JsonResponse({&#39;error&#39;: str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)
    except Exception:
        return JsonResponse({&#39;error&#39;: &#39;Something terrible went wrong&#39;}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



# delete user
@api_view([&amp;quot;DELETE&amp;quot;,&#39;GET&#39;]) 
@csrf_exempt
@permission_classes([IsAuthenticated])
@authentication_classes([TokenAuthentication])
def delete_user(request, pk):

    try:
        user_profile = MyAccount.objects.get(id=pk)
    except ObjectDoesNotExist:
        return JsonResponse({&#39;response&#39;: &amp;quot;given object does not exist&amp;quot;}, safe=False, status=status.HTTP_404_NOT_FOUND)

    user = request.user
    if user_profile != user: 
        return JsonResponse({&#39;response&#39;:&amp;quot;You don&#39;t have permission to delete the record.&amp;quot;}, safe=False, status=status.HTTP_401_UNAUTHORIZED)

    try:
        user_profile.delete()  #retuns 1 or 0
        return JsonResponse({&#39;user_delete&#39;: &amp;quot;record deleted&amp;quot;}, safe=False, status=status.HTTP_200_OK)
    except ObjectDoesNotExist as e:
        return JsonResponse({&#39;error&#39;: str(e)}, safe=False, status=status.HTTP_404_NOT_FOUND)
    except Exception:
        return JsonResponse({&#39;error&#39;: &#39;Something terrible went wrong&#39;}, safe=False, status=status.HTTP_500_INTERNAL_SERVER_ERROR)



# login view and get token
@api_view([&amp;quot;POST&amp;quot;, ])
def drflogin(request):

    email = request.data.get(&amp;quot;email&amp;quot;)
    username = request.data.get(&amp;quot;username&amp;quot;)
    password = request.data.get(&amp;quot;password&amp;quot;)
    account = MyAccount.objects.filter(email=email) | MyAccount.objects.filter(username=username)
    if not account:
        return Response({&amp;quot;error&amp;quot;: &amp;quot;Login failed&amp;quot;}, status=status.HTTP_401_UNAUTHORIZED)
    # authenticate(email=email, password=password)  # returns none if not authenticated
    account = authenticate(email=account[0].email, password=password)
    token, _ = Token.objects.get_or_create(user=account)
    login(request,account)  
    renderer= Response({&amp;quot;response&amp;quot; : &amp;quot;Successfully authenticated&amp;quot;,  &amp;quot;pk&amp;quot;: account.pk, &amp;quot;username&amp;quot;: account.username, &amp;quot;token&amp;quot;: token.key }, template_name= &amp;quot;Accountsapp/loginuser.html&amp;quot;, headers={&#39;Authorization&#39;: &#39;Token &#39; + token.key})
    return renderer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setup end points for our API&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from django.urls import path, include
from . import views as drf_views


app_name = &#39;Accountsapp&#39;

urlpatterns = [

    path(&#39;drf_users/&#39;, drf_views.get_users, name= &#39;drf_users&#39;),
    path(&#39;drf_user/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.get_given_user, name= &#39;drf_get_user&#39;),
    path(&#39;drf_updateuser/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.update_user, name= &#39;drf_updateusers&#39;),
    path(&#39;drf_deleteuser/&amp;lt;int:pk&amp;gt;/&#39;, drf_views.delete_user, name= &#39;drf_deleteuser&#39;),
    path(&#39;drf_adduser/&#39;, drf_views.user_add_view, name= &#39;drf_adduser&#39;),
    path(&#39;drf_login/&#39;, drf_views.drflogin, name=&#39;drf_login&#39;),

    
]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first create users and then test  delete, update and show users functionality of our API. We will use Postman for timebeing. Later we will built the front-end to perform all these actions.&lt;/p&gt;
&lt;h2 id=&#34;span-style-colororange-post-span-request-add-user&#34;&gt;&lt;span style= &#34;color:orange&#34;&gt; POST &lt;/span&gt; REQUEST: &lt;strong&gt;ADD USER&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_adduser/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ea8W3Bj.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorgreen-get-span-request-get-users&#34;&gt;&lt;span style= &#34;color:green&#34;&gt; GET &lt;/span&gt; REQUEST: &lt;strong&gt;GET USERS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_users/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://127.0.0.1:8000/drf_users/&#39; \
--header &#39;Authorization: Token 92cc8c32edb7bd111b89552a3031f918d2df5613&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dPnv4J4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorred-del-span-request-delete-user&#34;&gt;&lt;span style= &#34;color:RED&#34;&gt; DEL &lt;/span&gt; REQUEST: &lt;strong&gt;DELETE USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_deleteuser/&amp;lt;int:pk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request DELETE &#39;http://127.0.0.1:8000/drf_deleteuser/21&#39; \
--header &#39;Authorization: Token 1529e77c59999f819649828a5e9174ba44bd6bb4&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6IFah1s.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colordodgerblue-put-span-request-update-user&#34;&gt;&lt;span style= &#34;color:dodgerblue&#34;&gt; PUT &lt;/span&gt; REQUEST: &lt;strong&gt;UPDATE USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_updateuser/1/?username=updated_username_here&amp;amp;email=updated_email_here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request PUT &#39;http://127.0.0.1:8000/drf_updateuser/8/?username=rcbfl&amp;amp;email=rcbfl@gmail.com&#39; \
--header &#39;Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using postman
&lt;img src=&#34;https://i.imgur.com/LhVZ34L.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;span-style-colorgreen-get-span-request-get-user&#34;&gt;&lt;span style= &#34;color:green&#34;&gt; GET &lt;/span&gt; REQUEST: &lt;strong&gt;GET USER&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API end point&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8000/drf_user/&amp;lt;int:pk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl and passing authorization token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://127.0.0.1:8000/drf_user/8&#39; \
--header &#39;Authorization: Token 506ce0bbf7fa50f613678024586669d9b6bd82a0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using postman&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LiPdZIe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;front-end-setup&#34;&gt;Front end setup&lt;/h2&gt;
&lt;p&gt;In root directory create folder  &lt;code&gt;templates\Accountsapp\&lt;/code&gt; and create &lt;code&gt;RegiserUser.html&lt;/code&gt; file in it. Create form field in the file as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;          &amp;lt;form class=&amp;quot;form-horizontal&amp;quot; action=&amp;quot;&amp;quot; method=&amp;quot;post&amp;quot;  id=&amp;quot;myForm&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
          	{% csrf_token %}
            &amp;lt;!-- Name input--&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;username&amp;quot;&amp;gt;Name&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Your username&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Email input--&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;email&amp;quot;&amp;gt;Your E-mail&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Your email&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- password body --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your password&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- password body --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;password2&amp;quot;&amp;gt;Password2&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;password2&amp;quot; name=&amp;quot;password2&amp;quot; type=&amp;quot;password&amp;quot; placeholder=&amp;quot;confirm password&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            
            &amp;lt;!-- superuser input --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;label class=&amp;quot;col-md-3 control-label&amp;quot; for=&amp;quot;superuser&amp;quot;&amp;gt;Is superuser&amp;lt;/label&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;
                &amp;lt;input id=&amp;quot;issuperuser&amp;quot; name=&amp;quot;issuperuser&amp;quot; type=&amp;quot;checkbox&amp;quot;  class=&amp;quot;form-control&amp;quot; &amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
 
    
            &amp;lt;!-- Form actions --&amp;gt;
            &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
              &amp;lt;div class=&amp;quot;col-md-6 text-left&amp;quot;&amp;gt;
                &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary btn-lg&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
              &amp;lt;/div&amp;gt;


            &amp;lt;/div&amp;gt;
          &amp;lt;/fieldset&amp;gt;
          &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the form is created, we now need to take the input from the form and send to the register user API &lt;code&gt;drf_adduser/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;RegisterUser.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;


			function getCookie(name) {
		    var cookieValue = null;
		    if (document.cookie &amp;amp;&amp;amp; document.cookie !== &#39;&#39;) {
		        var cookies = document.cookie.split(&#39;;&#39;);
		        for (var i = 0; i &amp;lt; cookies.length; i++) {
		            var cookie = cookies[i].trim();
		            // Does this cookie string begin with the name we want?
		            if (cookie.substring(0, name.length + 1) === (name + &#39;=&#39;)) {
		                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
		                break;
		            }
		        }
		    }
		    return cookieValue;
		}
		var csrftoken = getCookie(&#39;csrftoken&#39;);



function fetchcall(event) {

		event.preventDefault();
		console.log(&#39;form submitted&#39;);
	var username = document.getElementById(&amp;quot;username&amp;quot;).value;
	var email = document.getElementById(&amp;quot;email&amp;quot;).value;
	var password = document.getElementById(&amp;quot;password&amp;quot;).value;
	var password2 = document.getElementById(&amp;quot;password2&amp;quot;).value;
	var issuperuser = document.getElementById((&#39;issuperuser&#39;)).checked;
	console.log(issuperuser)

		var url = &#39;/drf_adduser/&#39;;

			fetch(url, {
				method:&#39;POST&#39;,
				headers:{
					&#39;Content-type&#39;:&#39;application/json&#39;,
					&#39;X-CSRFToken&#39;:csrftoken,
				},
				body:JSON.stringify({
					&#39;email&#39;:email,
					&#39;username&#39;:username,
					&amp;quot;password&amp;quot;:password,
					&amp;quot;password2&amp;quot;:password2,
					&amp;quot;is_superuser&amp;quot;: issuperuser
				})
			}
			).then(function(response){
				store_response= response;
				return response.json();

			}).then(function(data){
				store_data =JSON.stringify(data);
				document.getElementById(&amp;quot;message&amp;quot;).innerHTML=  store_data;
			}).catch(function(error){
			console.error(error);
		});

	}
			
	var myForm = document.getElementById(&amp;quot;myForm&amp;quot;);

		console.log(username, password, myForm);
	myForm.addEventListener(&#39;submit&#39;, fetchcall);
	
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make this work in front-end, we need to register the file to &lt;code&gt;Accountsapp/views.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def register_user(request):
	# if request.user.is_authenticated:
	return render(request, &amp;quot;Accountsapp/RegisterUser.html&amp;quot;, {&#39;Title&#39;: &amp;quot;Register new user&amp;quot;})

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upload multiple geotagged images and store POINTS in postgresql database using geodjango</title>
      <link>https://amanbagrecha.github.io/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Geodjango is built on top of django and adds spatial functionality such as storing points, lines , polygon and multipolygon. It is prepackaged with Django but requires few additional softwares to make it fully functional. These include- GDAL, PROJ, GEOS, PostGIS. These can be downloaded from osgeo4W which bundles all these libraries. Then application can be added to apps in settings with &lt;code&gt;django.contrib.gis&lt;/code&gt; to the installed apps.&lt;/li&gt;
&lt;li&gt;An additional setting is required, which is to locate osgeo4w directory in django. If you install osgeo4w in default directory, you need to put the following code within the settings.py file.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# for window os
import os
import posixpath
if os.name == &#39;nt&#39;:
	import platform
	OSGEO4W = r&amp;quot;C:\OSGeo4W&amp;quot;
	if &#39;64&#39; in platform.architecture()[0]:
		OSGEO4W += &amp;quot;64&amp;quot;
	assert os.path.isdir(OSGEO4W), &amp;quot;Directory does not exist: &amp;quot; + OSGEO4W
	os.environ[&#39;OSGEO4W_ROOT&#39;] = OSGEO4W
	os.environ[&#39;GDAL_DATA&#39;] = OSGEO4W + r&amp;quot;\share\gdal&amp;quot;
	os.environ[&#39;PROJ_LIB&#39;] = OSGEO4W + r&amp;quot;\share\proj&amp;quot;
	os.environ[&#39;PATH&#39;] = OSGEO4W + r&amp;quot;\bin;&amp;quot; + os.environ[&#39;PATH&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Setup the database to postgis instead of postgresql.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# in settings.py file
DATABASES = {
	&#39;default&#39;: {
		 &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.postgis&#39;,
		 &#39;NAME&#39;: &#39;database_name_here&#39;,
		 &#39;USER&#39;: &#39;postgres&#39;,
		&#39;PASSWORD&#39;: &#39;password_here&#39;,
		&#39;HOST&#39;: &#39;localhost&#39;,
		&#39;PORT&#39;: &#39;5432&#39;,
	},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;We now create a model to upload geotagged images and store the geolocation as point information into the database. For demo purposes we can have image and geom as mandatory field, rest can be blank.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.db import models
from django.contrib.auth.models import User # our user model
from django.contrib.gis.db import models # geodjango import
from django.utils import timezone # to capture date created from metadata


class ImageUpload(models.Model):
	user = models.ForeignKey(User,  on_delete= models.SET_DEFAULT, default=1)
	image = models.ImageField( null=False, blank=False, upload_to = &#39;geotaggedimages/&#39;) 
	date_created = models.DateTimeField(default=timezone.now, null=True) # date and time image is uploaded
	image_url = models.URLField(max_length=250, null=True, blank=True) # grab the url from s3 bucket on save
	date_captured = models.DateTimeField(null=True, blank = True) # date and time image was captured
	geom = models.PointField( null=True, blank=False) # grab the geolocation from image and store in database as POINT field
	class Meta:
		verbose_name = &#39;geotagged images&#39;
		verbose_name_plural = &#39;geotagged images&#39;

	def __str__(self):
		return str(self.image.name)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;We now run migrations and migrate the model using &lt;code&gt;.\manage.py makemigrations&lt;/code&gt; and &lt;code&gt;.\manage.py migrate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We now create our view to accept POST/AJAX request from our frontend&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.contrib.auth import  login 
from django.contrib import messages
from .models import ImageUpload
from django.contrib.gis.geos import Point
from django.http import JsonResponse
from PIL import Image
from PIL.ExifTags import GPSTAGS
from PIL.ExifTags import TAGS
from datetime import datetime
#________________________________________FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#
# COURTESY OF https://developer.here.com/blog/getting-started-with-geocoding-exif-image-metadata-in-python3
def get_decimal_from_dms(dms, ref):

	degrees = dms[0]
	minutes = dms[1] / 60.0
	seconds = dms[2] / 3600.0

	if ref in [&#39;S&#39;, &#39;W&#39;]:
		degrees = -degrees
		minutes = -minutes
		seconds = -seconds

	return round(degrees + minutes + seconds, 5)

def get_coordinates(geotags):
	lat = get_decimal_from_dms(geotags[&#39;GPSLatitude&#39;], geotags[&#39;GPSLatitudeRef&#39;])

	lon = get_decimal_from_dms(geotags[&#39;GPSLongitude&#39;], geotags[&#39;GPSLongitudeRef&#39;])

	return (lon, lat)

def get_geotagging(exif):
	&amp;quot;&amp;quot;&amp;quot;
	# 34853 is key for tag GPSInfo
	&amp;quot;&amp;quot;&amp;quot;
	if not exif:
		raise ValueError(&amp;quot;No EXIF metadata found&amp;quot;)

	geotagging = {}
	for (idx, tag) in TAGS.items():
		if tag == &#39;GPSInfo&#39;:
			if idx not in exif:
				raise ValueError(&amp;quot;No EXIF geotagging found&amp;quot;)

			for (key, val) in GPSTAGS.items():
				if key in exif[idx]:
					geotagging[val] = exif[idx][key]

	return geotagging
	
#________________________________________END OF FUNCTIONS FOR IMAGE EXIF DATA______________________________________________________________________________#	
	
@login_required(login_url=&#39;login&#39;)
def home_page(request):
	
	user = request.user # get logged in user
	
	if request.is_ajax():
		files = request.FILES.getlist(&#39;images&#39;) # returns files: eg: [TemporaryUploadedFile: human15-28.png (image/png), ]
		message = []
		for f in files: # loop over all images
			
			try:
				with Image.open(f) as img:
					exif = img._getexif()
  				geotags = get_geotagging(exif) # this decides if image is geotagged or nongeotagged
  				get_corrd = get_coordinates(geotags)
  				print(&amp;quot;get_corrd&amp;quot;,get_corrd)
  				geoimage = ImageUpload(user=user, image=f) # create an instance of model
  				geoimage.geom = Point(get_corrd) # X is longitude, Y is latitude, Point(X,Y) ; returns SRID=4326;POINT (11.88454 43.46708) [WKT format]
  				geoimage.save()
  			  message.append(f&amp;quot;file {f} uploaded to images/&amp;quot;)

			except Exception as e:
				message.append(f&amp;quot;{e}&amp;quot;)
  	
  	return JsonResponse({&amp;quot;status&amp;quot;: message}, safe=False) #redirect(&#39;home&#39;)
	
	else:
		return render(request, &amp;quot;GisMap/home.html&amp;quot;, {&#39;Title&#39;: &amp;quot;Home Page&amp;quot;}) # name of my app is GisMap, and home.html is the fornt-end from where images are uploaded.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;These steps will ensure you have multiple images uploaded at once and all the geolocation information can be stored in database, which later can be import to QGIS for data visualisation. Although both postgresql and django admin allows users to use the geometry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!---
## Get Started

- 👉 [**Create a new site**](https://wowchemy.com/templates/)
- 📚 [**Personalize your site**](https://wowchemy.com/docs/)
- 💬 [Chat with the **Wowchemy community**](https://discord.gg/z8wNYzb) or [**Hugo community**](https://discourse.gohugo.io)
- 🐦 Twitter: [@wowchemy](https://twitter.com/wowchemy) [@GeorgeCushen](https://twitter.com/GeorgeCushen) [#MadeWithWowchemy](https://twitter.com/search?q=(%23MadeWithWowchemy%20OR%20%23MadeWithAcademic)&amp;src=typed_query)
- 💡 [Request a **feature** or report a **bug** for _Wowchemy_](https://github.com/wowchemy/wowchemy-hugo-modules/issues)
- ⬆️ **Updating Wowchemy?** View the [Update Guide](https://wowchemy.com/docs/guide/update/) and [Release Notes](https://wowchemy.com/updates/)

## Crowd-funded open-source software

To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.

### [❤️ Click here to become a sponsor and help support Wowchemy&#39;s future ❤️](https://wowchemy.com/plans/)

As a token of appreciation for sponsoring, you can **unlock [these](https://wowchemy.com/plans/) awesome rewards and extra features 🦄✨**

## Ecosystem

* **[Hugo Academic CLI](https://github.com/wowchemy/hugo-academic-cli):** Automatically import publications from BibTeX

## Inspiration

[Check out the latest **demo**](https://academic-demo.netlify.com/) of what you&#39;ll get in less than 10 minutes, or [view the **showcase**](https://wowchemy.com/user-stories/) of personal, project, and business sites.

## Features

- **Page builder** - Create *anything* with [**widgets**](https://wowchemy.com/docs/page-builder/) and [**elements**](https://wowchemy.com/docs/writing-markdown-latex/)
- **Edit any type of content** - Blog posts, publications, talks, slides, projects, and more!
- **Create content** in [**Markdown**](https://wowchemy.com/docs/writing-markdown-latex/), [**Jupyter**](https://wowchemy.com/docs/import/jupyter/), or [**RStudio**](https://wowchemy.com/docs/install-locally/)
- **Plugin System** - Fully customizable [**color** and **font themes**](https://wowchemy.com/docs/customization/)
- **Display Code and Math** - Code highlighting and [LaTeX math](https://en.wikibooks.org/wiki/LaTeX/Mathematics) supported
- **Integrations** - [Google Analytics](https://analytics.google.com), [Disqus commenting](https://disqus.com), Maps, Contact Forms, and more!
- **Beautiful Site** - Simple and refreshing one page design
- **Industry-Leading SEO** - Help get your website found on search engines and social media
- **Media Galleries** - Display your images and videos with captions in a customizable gallery
- **Mobile Friendly** - Look amazing on every screen with a mobile friendly version of your site
- **Multi-language** - 34+ language packs including English, 中文, and Português
- **Multi-user** - Each author gets their own profile page
- **Privacy Pack** - Assists with GDPR
- **Stand Out** - Bring your site to life with animation, parallax backgrounds, and scroll effects
- **One-Click Deployment** - No servers. No databases. Only files.

## Themes

Wowchemy and its templates come with **automatic day (light) and night (dark) mode** built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the [Demo](https://academic-demo.netlify.com/) to see it in action! Day/night mode can also be disabled by the site admin in `params.toml`.

[Choose a stunning **theme** and **font**](https://wowchemy.com/docs/customization) for your site. Themes are fully customizable.

## License

Copyright 2016-present [George Cushen](https://georgecushen.com).

Released under the [MIT](https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md) license.
--&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
