<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CRUD | Aman Bagrecha</title>
    <link>https://amanbagrecha.github.io/tag/crud/</link>
      <atom:link href="https://amanbagrecha.github.io/tag/crud/index.xml" rel="self" type="application/rss+xml" />
    <description>CRUD</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 27 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://amanbagrecha.github.io/media/icon_hu34b7b96a7941bf879d4219a76e82104f_4254_512x512_fill_lanczos_center_2.png</url>
      <title>CRUD</title>
      <link>https://amanbagrecha.github.io/tag/crud/</link>
    </image>
    
    <item>
      <title>CRUD Application using node express api</title>
      <link>https://amanbagrecha.github.io/project/internal-project/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/project/internal-project/</guid>
      <description>&lt;h1 id=&#34;project-setup&#34;&gt;Project Setup&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A project to demostrate rest-api crud operation in node-express application. Node and express allows for easy api building and super easy to create application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;create package.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install express&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save express
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;index.js&lt;/code&gt; file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import express from &#39;express&#39;;  // both are same (works with node 14.5 and above..)
const express = require(&#39;express&#39;); // old version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To enable the first line of code for above we have to make changes in package.json as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;quot;type&amp;quot; : &amp;quot;module&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install nodemon package to refresh the server on each save&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt; add under scripts. This is done to start application using nodemon.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;nodemon index.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For modularity we create another folder where we would store all our routes
create a folder &lt;code&gt;routes/users.js&lt;/code&gt; which has the following basic template.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import express from &#39;express&#39;;

// Use the express.Router class to create modular, mountable route handlers
const router = express.Router();

// routes here
// eg: router.get(...)

// export the app `router` so that it can be imported in index.js
export default router;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now import the exported &lt;code&gt;router&lt;/code&gt; app to &lt;code&gt;index.js&lt;/code&gt; as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import router from &#39;./routes/users.js&#39;;

app.use(&amp;quot;/people&amp;quot;, router);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.post(&#39;/&#39;, (req, res) =&amp;gt; {
    // when making post request, we have access to req.body
    user_list.push(req.body);  // user_list is list of dictoriay contianing all users
})
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;next-step-setting-up-mongo-db-database&#34;&gt;Next step: Setting up mongo db database&lt;/h3&gt;
&lt;p&gt;npm install mongoose&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import mongoose from &#39;mongoose&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const CONNECTION_URL = &amp;quot;mongodb+srv://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@cluster0.frghl.mongodb.net/&amp;lt;data_basename&amp;gt;?retryWrites=true&amp;amp;w=majority&amp;quot;;
mongoose.connect(CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() =&amp;gt; app.listen(PORT, () =&amp;gt; console.log(`Server Running on Port: http://localhost:${PORT}`))) // what to do when we connection is made
  .catch((error) =&amp;gt; console.log(`${error} did not connect`)); // what if it goes wrong
mongoose.set(&#39;useFindAndModify&#39;, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now create schema for our database. Since this is basic crud, we want username, email.
we do so by creating &lt;code&gt;user_model.js&lt;/code&gt; file inside &lt;code&gt;models&lt;/code&gt; folder in root directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import mongoose from &#39;mongoose&#39;;

const postSchema = mongoose.Schema({
    firstname: String,
    lastname: String,
    email: { // required field
        type: String,
        required: true
    },
    createdAt: { 
        type: Date,
        default: new Date(),
    },
})

var user_model = mongoose.model(&#39;user_model&#39;, postSchema);

export default user_model;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After exporting the model, we now import in our &lt;code&gt;functions.js&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Error messages&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-error&#34;&gt;import { Mongoose } from &#39;mongoose&#39;;
         ^^^^^^^^
SyntaxError: Named export &#39;Mongoose&#39; not found. The requested module &#39;mongoose&#39; is a CommonJS module, which may not support all module.exports as named exports.
CommonJS modules can always be imported via the default export, for example using:

import pkg from &#39;mongoose&#39;;
const { Mongoose } = pkg;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Django-rest-framework CRUD Token Authetication Application</title>
      <link>https://amanbagrecha.github.io/project/external-project/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Web application to access store information on click of marker!</title>
      <link>https://amanbagrecha.github.io/project/node-express-crud/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/project/node-express-crud/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
