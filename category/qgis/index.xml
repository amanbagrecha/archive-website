<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QGIS | Aman Bagrecha</title>
    <link>https://amanbagrecha.github.io/category/qgis/</link>
      <atom:link href="https://amanbagrecha.github.io/category/qgis/index.xml" rel="self" type="application/rss+xml" />
    <description>QGIS</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 24 Jul 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://amanbagrecha.github.io/media/icon_hub8f2c4a40c112e5edee4297ae1d00aa4_198578_512x512_fill_lanczos_center_2.png</url>
      <title>QGIS</title>
      <link>https://amanbagrecha.github.io/category/qgis/</link>
    </image>
    
    <item>
      <title>Contour Maps in QGIS</title>
      <link>https://amanbagrecha.github.io/post/qgis/contour-maps-in-qgis/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/qgis/contour-maps-in-qgis/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Most of the time, we are equipped with a discrete set of sample points (of temperature, rainfall etc) and are tasked with generating a continuous surface.
This is where spatial interpolation comes into picture. The objective is to estimate the most probable value at an unknown location with a set of known points within the extent of sample points.&lt;/p&gt;
&lt;p&gt;Methods to perform spatial interpolation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;TIN: Triangular Irregular Network forms contiguous, non-overlapping triangles by dividing the geographic space on set of sample points&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDW: Inverse Distance Weighted interpolation method estimates cell values by weighted average of sample data. The closer the point, the more weight assigned. We can fix the radius of influence or the total sample points to weigh for cell value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spline: Also called french curves. It uses a mathematical function that minimizes overall surface curvature, resulting in a smooth surface that passes through the input points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kriging: A group of geostatistical techniques to interpolate the value of a random field at an unobserved location from observations of its value at a nearby location. It is implemented using semi-variogram.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this blog, we create surface plots for Rainfall Correction Factors, which is indicative of how much the climate impacts a hydraulic structure based on the return period it is designed for.&lt;/p&gt;
&lt;p&gt;These RCF are useful for hydraulic structures such as dams, storm water drains, and spillways.
These RCF are derived from Global Climate Models (GCMs) which models future scenarios. Not considering these factors can lead to reduced life time of the structure.&lt;/p&gt;
&lt;p&gt;We calculate the RCF for each point for a grid of lat,lon around the indian subcontinent. These RCF are as a result of intensive computational simulations run in matlab which is out of scope for this blog.&lt;/p&gt;
&lt;h3 id=&#34;1-load-points-in-qgis&#34;&gt;1. Load points in QGIS&lt;/h3&gt;
&lt;p&gt;Our data is in the csv format with each column of the RP_ family representing the return period the Rainfall Correction Factor is estimated for.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fZpYAK9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -sample data points with key location and return period of RCF&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This file can be imported into qgis from the layers panel and adding a delimited text layer. Once the layer is added, we export as shapefile so as to ease the process of automating the workflow which comes in handy later at the end of the blog.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MvHcCZx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -Add the csv file using Add delimited text layer&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We load the sampled points and add an India boundary as the base vector to later clip the features to our area of Interest.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IuoE9pb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.3 -Points equally spaced around the Indian state. Each point represent a RCF value&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;2-generate-raster-from-points-using-tin-interpolation&#34;&gt;2. Generate Raster from points using TIN interpolation&lt;/h3&gt;
&lt;p&gt;For demonstration let us take an example to run through the entire process of generating surface raster and styling which can be later automated using python in qgis.&lt;/p&gt;
&lt;p&gt;We use these sampled locations of points to generate a surface using TIN Interpolation readily available as a toolbox in qgis. The input parameter for the vector layer is our shapefile of points while the interpolation attribute is going to be the RP_ family of columns.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nzE5Vj7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.4 -TIN interpolation in QGIS&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The output of the interpolation with pixel size of 0.01 is shown below. The extent was set to the boundary of Indian state.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1HAjqQ4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.5 -Output surface raster with 0.01 pixel size&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can go a step further and derive contours using the &lt;code&gt;contour&lt;/code&gt; toolbox provided in qgis.&lt;/p&gt;
&lt;h3 id=&#34;3-generate-contours-from-raster-to-style-the-layer&#34;&gt;3. Generate Contours from raster to style the layer&lt;/h3&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SOKxUmC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.6 -Generate contours from the surface raster&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ExfM0MM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.7 -Output as contour lines with 0.1 as interval&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A better way to get the contour lines is by changing the symbology of the raster to contours and providing an interval. This exact method will be employed later in this post.&lt;/p&gt;
&lt;h3 id=&#34;automating-the-process&#34;&gt;Automating the process&lt;/h3&gt;
&lt;p&gt;So far we have looked into creating surface raster for an individual return period. But we have several other return periods and we do not want to repeat ourselves. Thus we write a tiny python code to automate this workflow.&lt;/p&gt;
&lt;p&gt;We derive the RCFs for return period of 5year, 10year, 25year, 50year&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# specify the output location for saving the files
OUTPATH = &#39;D:\\gcm_qgis\\&#39;

# loop over different return periods from the shapefile
for i,j in enumerate([&#39;2y&#39;, &#39;10y&#39;, &#39;25y&#39;, &#39;50y&#39;], 3):

    # specify the shapefile containing the RCP values
    MYFILE = &#39;D:\\gcm_qgis\\RCP_avg.shp|layername=RCP_avg::~::0::~::{}::~::0&#39;.format(i)

    # Run interpolation and do not save the output permanently
    RESULTS = processing.run(&amp;quot;qgis:tininterpolation&amp;quot;, 
    {&#39;INTERPOLATION_DATA&#39;: MYFILE,
    &#39;METHOD&#39;:1,
    &#39;EXTENT&#39;:&#39;68.205600900,97.395561000,6.755997100,37.084107000 [EPSG:4326]&#39;,
    &#39;PIXEL_SIZE&#39;:0.01,
    &#39;OUTPUT&#39;:&#39;TEMPORARY_OUTPUT&#39;})

    # clip the temporary output from prev step and save the files.
    processing.runAndLoadResults(&amp;quot;gdal:cliprasterbymasklayer&amp;quot;, 
    {&#39;INPUT&#39;:RESULTS[&#39;OUTPUT&#39;],
    &#39;MASK&#39;:&#39;C:/Users/91911/Downloads/india-osm.geojson.txt|layername=india-osm.geojson&#39;,
    &#39;SOURCE_CRS&#39;:None,&#39;TARGET_CRS&#39;:None,&#39;NODATA&#39;:None,
    &#39;ALPHA_BAND&#39;:False,
    &#39;CROP_TO_CUTLINE&#39;:True,
    &#39;KEEP_RESOLUTION&#39;:False,&#39;SET_RESOLUTION&#39;:False,&#39;X_RESOLUTION&#39;:None,
    &#39;Y_RESOLUTION&#39;:None,
    &#39;MULTITHREADING&#39;:False,&#39;OPTIONS&#39;:&#39;&#39;,
    &#39;DATA_TYPE&#39;:0,
    &#39;EXTRA&#39;:&#39;&#39;,
    &#39;OUTPUT&#39;:os.path.join(OUTPATH, &#39;RCP_avg_&#39; + j + &#39;.tif&#39;)})
    iface.messageBar().pushMessage(
        &#39;Success:&#39;, &#39;Output file written at &#39;, level=Qgis.Success)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our output would save and display the contour files with RCP_avg_{return_period} where return period ranges from [2,5,10,25,50]&lt;/p&gt;
&lt;p&gt;The code first fetches our shapefile, which is used to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create temporary TIN interpolation rasters&lt;/li&gt;
&lt;li&gt;clipped to india boundary using &lt;code&gt;clip raster by mask layer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we have the rasters for each return period, we style the raster using singleband pseudocolor in &lt;code&gt;Equal Interval&lt;/code&gt; mode ranging from 1.0 - 1.8 in steps of 0.1&lt;/p&gt;
&lt;p&gt;We make a copy of the raster layer and place it above it, giving it a contour style at an interval of 0.1&lt;/p&gt;
&lt;p&gt;We copy each return period and set the styling to be of contour as seen in the figure. This allows for a better visual representation of the regions with same the values.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tz0DP0k.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.8 -Styling the copy of surface raster&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The final output can be seen in the below figure.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fiX9RA9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.9 -Final output with contours overlaid on top of surface themself&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;final-comments&#34;&gt;Final comments&lt;/h2&gt;
&lt;p&gt;We looked at various spatial interpolation technique and automated workflow to derive spatially interpolated surface raster.&lt;/p&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;p&gt;a. &lt;a href=&#34;https://www.intechopen.com/chapters/52704&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparison of Spatial Interpolation Techniques Using Visualization and Quantitative Assessment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;b. &lt;a href=&#34;https://docs.qgis.org/3.16/en/docs/gentle_gis_introduction/spatial_analysis_interpolation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spatial Analysis QGIS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validating LULC classes in QGIS</title>
      <link>https://amanbagrecha.github.io/post/qgis/validating-lulc-classes-in-qgis/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/qgis/validating-lulc-classes-in-qgis/</guid>
      <description>&lt;h2 id=&#34;the-problem-statement&#34;&gt;&lt;strong&gt;The problem statement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Any land-use land cover classification needs to be validated with ground-truth data to measure the accuracy. A key single-valued statistic to determine the effectiveness of classification is Cohen’s kappa. This validation metric has been fairly widely used for unbalanced classification as well which expresses a level of agreement between two annotators on a classification problem.&lt;/p&gt;
&lt;p&gt;The objective of this quality assessment was to validate the land cover map performed on June, 2020 sentinel-2 imagery by k-means classification algorithm, thus providing a statistical measure of overall class predictions. The validation was done using an independent set of sample points (~500) generated randomly following stratified random sampling design, to capture the variance within the class&lt;/p&gt;
&lt;p&gt;After running the tool, the sample points were manually assigned to the ground-truth class. The ground-truth dataset was taken to be Bing-satellite imagery as a proxy for field data. Each sample point was labelled by visual inspection on the ground-truth dataset.&lt;/p&gt;
&lt;h2 id=&#34;step-1-classify-image&#34;&gt;&lt;strong&gt;Step 1: Classify Image&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load raster Image&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;K-means clustering for grids&lt;/code&gt; under SAGA tools. Select the raster Image as &lt;code&gt;grid&lt;/code&gt; and in this case we specify 4 classes&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xdx5Tsn.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -K-means clustering on sentinel-2 Image&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;code&gt;Run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;At this stage we have unsupervised k-means clustering output ready &lt;code&gt;(Fig.2)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eW0cOXE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -classification of RR Nagar, Bengaluru. Classes- Forest, Urban, water, Bareland&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-2-convert-to-polygon-vector-format&#34;&gt;&lt;strong&gt;Step 2: Convert to polygon (vector format)&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Polygonize (Raster to Vector)&lt;/code&gt; tool under &lt;code&gt;GDAL&lt;/code&gt;-&amp;gt;&lt;code&gt;Raster Conversion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the classified image as input. Leave everything else as default. The output would be a &lt;code&gt;Vectorised&lt;/code&gt; scratch layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/36nk2tF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.3 -Convert Raster to vector&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the name of the field (&lt;code&gt;DN&lt;/code&gt; here). This will be used later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fix geometries (this step is important here to avoid any error in further steps) &lt;code&gt;Vector Geometry&lt;/code&gt;-&amp;gt;&lt;code&gt;Fix Geometry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gG9gBIc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.4 -Fixing topology issues with &lt;code&gt;Fix Geometry&lt;/code&gt; Toolbox&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-3-dissolve-the-layer-on-dn-field&#34;&gt;&lt;strong&gt;Step 3: Dissolve the layer on DN field&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this step we dissolve the layer based on the &lt;code&gt;DN&lt;/code&gt; value. This will ensure that each polygon can be evaluated based on the land class type which is needed for stratified random sampling.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gm1ihfT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.5 -&lt;code&gt;Dissolve&lt;/code&gt; toolbox to dissolve polygon on &lt;code&gt; DN &lt;/code&gt; value&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure to select dissolve field as &lt;code&gt;DN&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-4-create-stratified-random-samples&#34;&gt;&lt;strong&gt;Step 4: Create stratified random samples&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Go to &lt;code&gt;Vector-&amp;gt;research tools-&amp;gt; Random Points inside Polygon&lt;/code&gt; and set &lt;code&gt;Sampling Strategy&lt;/code&gt; = &lt;code&gt;Points Density&lt;/code&gt; and &lt;code&gt;Point count or density&lt;/code&gt; = &lt;code&gt;0.001&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: The value &lt;code&gt;0.001&lt;/code&gt; signify &lt;code&gt;1&lt;/code&gt; point for &lt;code&gt;1/0.001&lt;/code&gt; m2 of area, given that the units is meters.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1LB6R5L.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.6 - One sample point is generated for each 1000 m2 of area&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-5-extract-raster-values-to-sample-layer&#34;&gt;&lt;strong&gt;Step 5: Extract raster values to sample layer&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We extract the raster value, which is essentially the land cover class for the classified image. We use &lt;code&gt;Sample Raster Values&lt;/code&gt; function here (&lt;code&gt;Fig.7&lt;/code&gt;). The input layer is the random points we generated earlier and the the raster layer is the classified image. The output adds a new column to the sample points layer with the prediction class of the land-cover (&lt;code&gt;Fig.8&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s2RXNOZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.7 -Running &lt;code&gt;Sample Raster Value&lt;/code&gt; to extract Raster values for the input points&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GG9wgNK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.8 -The corresponding Attribute Table with Predicted Class &lt;code&gt; PREDICTED_1&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-6-ground-truth-labelling-using-bing-maps&#34;&gt;&lt;strong&gt;Step 6: Ground Truth Labelling using Bing maps&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At this stage we are ready to validate the image using Bing maps as ground truth. We turn on the edit mode and create new field named Actual class. THen we visually inspect the class on the map and note the land-cover class. Once we inspect all the sample points we can use cohens Kappa statistics to determine the validation result. Alternatively, simply calculating the accuracy would also suffice the need.&lt;/p&gt;
&lt;h2 id=&#34;step-7-add-other-field-to-the-attribute-table-with-reclassification&#34;&gt;&lt;strong&gt;Step 7: Add other field to the attribute table with reclassification&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We can use the &lt;code&gt;Field Calculator&lt;/code&gt; to generate verbose text for each label in our feature class and display labels for the prediction.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- in field calculator to increase verbosity
CASE WHEN PREDICTED_1 is 2 THEN &#39;Urban&#39; 
WHEN PREDICTED_1 is 1 THEN &#39;Bareland&#39;
WHEN PREDICTED_1 is 4 THEN &#39;Forest&#39;
WHEN PREDICTED_1 is 3 THEN &#39;Urban&#39;
END
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3CBAK6X.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.9 -Predicted classes (foreground) vs ground truth (background)&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With this we come to end of the post. Now, validation accuracy can be reported for k-means classification.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
