<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openlayers | Aman Bagrecha</title>
    <link>https://amanbagrecha.github.io/category/openlayers/</link>
      <atom:link href="https://amanbagrecha.github.io/category/openlayers/index.xml" rel="self" type="application/rss+xml" />
    <description>Openlayers</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 16 Jul 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://amanbagrecha.github.io/media/icon_hub8f2c4a40c112e5edee4297ae1d00aa4_198578_512x512_fill_lanczos_center_2.png</url>
      <title>Openlayers</title>
      <link>https://amanbagrecha.github.io/category/openlayers/</link>
    </image>
    
    <item>
      <title>Query Geoserver Layer using openlayers</title>
      <link>https://amanbagrecha.github.io/post/geoserver/geoserver-query-builder/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/geoserver/geoserver-query-builder/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This blog demonstrates how to display and query all geoserver layers or from a workspace using geoserver REST API. CQL (Common Query Language) filter provided by geoserver is used to query the layer.&lt;/p&gt;
&lt;p&gt;We create a full stack application, setting up the backend using django and the frontend using vanilla js. The application will later be deployed on aws ec2 instance.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-backend-django&#34;&gt;Setting up the backend (Django)&lt;/h2&gt;
&lt;h3 id=&#34;create-virtual-environment-and-activate-it&#34;&gt;Create virtual environment and activate it&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create --name djangoEnv
conda activate djangoEnv
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;start-a-new-project-and-create-app&#34;&gt;Start a new project and create app&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;django-admin startproject DOGP
python manage.py startapp gisapp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-the-database&#34;&gt;Setup the database&lt;/h3&gt;
&lt;p&gt;We set up postgresql for this exercise. Create a new database and add a postgis extension from it. For more info on how to set up the extension, click here.&lt;/p&gt;
&lt;p&gt;Once the database is set up on the localhost server, we make changes to the settings.py module in our application.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# change database

DATABASES = {
	&#39;default&#39;: {
		 &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.postgis&#39;,
		 &#39;NAME&#39;: &#39;DOGP&#39;, # our new database name
		 &#39;USER&#39;: &#39;postgres&#39;,
		&#39;PASSWORD&#39;: &#39;1234&#39;,
		&#39;HOST&#39;: &#39;127.0.0.1&#39;,
		&#39;PORT&#39;: &#39;5432&#39;,
	},
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-installed-apps&#34;&gt;Add installed apps&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
INSTALLED_APPS = [
    &#39;gisapp.apps.GisappConfig&#39;,
    &#39;django.contrib.gis&#39;,
]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other setups such as setting up login page and authentication, creating media url root and setting up the url which we are not going to deal with in this blog post.&lt;/p&gt;
&lt;p&gt;Once the setup is done, we run migrations to reflect those changes in the admin page.&lt;/p&gt;
&lt;p&gt;On running &lt;code&gt;python manage.py runserver&lt;/code&gt; you should see this page.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zSSpoqV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -Page indicating successful installation of Django&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;Our focus will be on the frontend, but the full code can be accessed from &lt;a href=&#34;https://github.com/amanbagrecha/openlayers-geoserver-query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For querying and displaying layers from geoserver, we first need geoserver installed and running. For more info on how to do that can be found &lt;a href=&#34;https://docs.geoserver.org/master/en/user/installation/win_binary.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the following steps we setup our basemap layer to be ESRI World Imagery and define an empty vector layer to store the result of query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// map setup
var maplayer = 	new ol.layer.Tile({
    source: new ol.source.XYZ({
	  attributions: [&#39;Powered by Esri&#39;,&#39;Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community&#39;],
	  attributionsCollapsible: false,
	  url: &#39;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&#39;,
	  maxZoom: 23
	}),
	zIndex: 0
  })

var view = new ol.View({
	projection: &#39;EPSG:4326&#39;,
	center: [-103.32989447589996, 44.18118547387081],
	zoom: 7,
  });
  
var map = new ol.Map({
	layers: [ maplayer],
	target: &#39;map&#39;,
	view: view,
  });

// define empty vector layer to store query result later
var SearchvectorLayerSource =  new ol.source.Vector({
	  
	})
var SearchvectorLayer = new ol.layer.Vector({
	source:SearchvectorLayerSource
  });
  map.addLayer(SearchvectorLayer);

// define headers for authentication and login
MyHeaders = {&#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Access-Control-Allow-Credentials&#39; : true,
				&#39;Access-Control-Allow-Origin&#39;:&#39;*&#39;,
				&#39;Accept&#39;: &#39;application/json&#39;,
				&#39;Authorization&#39;: &#39;Basic &#39; + btoa(&#39;admin:geoserver&#39;)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To access all layers from a particular workspace, the api end point to do that is as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// https://docs.geoserver.org/latest/en/api/#1.0.0/layers.yaml
/workspaces/{workspaceName}/layers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see this in action, we display all layers from the &lt;code&gt;sf&lt;/code&gt; workspace, provided in geoserver by default.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/sSjlZkU.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -Geoserver layers from sf workspace&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var layerList = []; // array to store all the layer info
var loginInfo = [&amp;quot;admin&amp;quot;, &amp;quot;geoserver&amp;quot;]; // username and password for geoserver
var geoserverURL = geoserver_ip + &amp;quot;:&amp;quot; + geoserver_port  

// make ajax call to access the sf layer
$.ajax({
    url: geoserverURL + &#39;/geoserver/rest/workspaces/sf/layers/&#39;,
    type: &#39;GET&#39;,
    dataType: &#39;json&#39;,
    contentType: &amp;quot;application/json&amp;quot;,
    beforeSend: function(xhr) {
         xhr.setRequestHeader (&amp;quot;Authorization&amp;quot;, &amp;quot;Basic &amp;quot; + btoa(loginInfo[0] + &amp;quot;:&amp;quot; + loginInfo[1]));
    },
    success: function(data){
        for (var i = 0; i &amp;lt; data.layers.layer.length; i++) {
            layerList.push([data.layers.layer[i].name, data.layers.layer[i].href]);
        }

    },
    async: false
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this ajax call returns us a &lt;code&gt;layerList&lt;/code&gt; array containing all the layer name and the url associated with it of size (:, 2)&lt;/p&gt;
&lt;p&gt;This layer can then be displayed on the frontend by looping over the array and inserting into the div element.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZDctdje.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.3 -The layers of workspace `sf` displayed on the map with some styles applied to it
&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;The next step after displaying all the layers of the workspace is to load the features of the layer on selecting a particular layer.&lt;/p&gt;
&lt;p&gt;When the layer is ticked we send a request to geoserver to load the features of that layer and add to the map. If the layer is then unticked, we do the opposite and remove the layer from map.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  function toggleLayer(input) {
	  if (input.checked) {
		  wmsLayer = new ol.layer.Image({
			source: new ol.source.ImageWMS({
			  url: geoserver_ip+ &#39;:&#39;+geoserver_port + &amp;quot;/geoserver/wms&amp;quot;,
			  imageLoadFunction: tileLoader,
			  params: { LAYERS: input.value },
			  serverType: &amp;quot;geoserver&amp;quot;,
			}),
			name: input.value,
		  });

		map.addLayer(wmsLayer);
					
	  } else {
		  map.getLayers().forEach(layer =&amp;gt; {
			  if (layer.get(&#39;name&#39;) == input.value) {
				 map.removeLayer(layer);
			 }
		 });
	  }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Wgy2YV5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.4 -Displaying layer on map&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;query-layer&#34;&gt;Query layer&lt;/h3&gt;
&lt;p&gt;We start with the querying the layer by their attributes. We load all the attributes (as columns) and display as dropdown. We use &lt;code&gt;wfs&lt;/code&gt; service and &lt;code&gt;DescribeFeatureType&lt;/code&gt; request to load the attributes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  function loadprops(layername) {
	  selectedLayer = layername;
	  fetch(
		geoserver_ip+ &#39;:&#39;+geoserver_port+&amp;quot;/geoserver/wfs?service=wfs&amp;amp;version=2.0.0&amp;amp;request=DescribeFeatureType&amp;amp;typeNames=&amp;quot; + 
		  layername +
		  &amp;quot;&amp;amp;outputFormat=application/json&amp;quot;,
		{
		  method: &amp;quot;GET&amp;quot;,
		  headers: MyHeaders,
		}
	  )
		.then(function (response) {
		  return response.json();
		})
		.then(function (json) {
			var allprops = json.featureTypes[0].properties;
		  var ColumnnamesSelect = document.getElementById(&amp;quot;Columnnames&amp;quot;);
			  ColumnnamesSelect.innerHTML = &#39;&#39;
			for (i = 0; i &amp;lt; allprops.length; i++){
				if (allprops[i].name != &#39;the_geom&#39;) {
					ColumnnamesSelect.innerHTML +=
					  &#39;&amp;lt;option value=&amp;quot;&#39; +
					  allprops[i].name +
					  &#39;&amp;quot;&amp;gt; &#39; +
					  allprops[i].name +
					  &amp;quot;&amp;lt;/option&amp;gt;&amp;quot;;
				}
  
			}
		});
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upto this point we have the layer and its features we want to search for. To query the layer we make a fetch call to ows service protocol and pass in the values of feature and the layer we want to query for.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;CQL_filter = column_name + &amp;quot; = &#39;&amp;quot; + query_value + &amp;quot;&#39;&amp;quot;;
  query_url =geoserver_ip+ &#39;:&#39;+geoserver_port + &amp;quot;/geoserver/sf/ows?service=WFS&amp;amp;version=1.0.0&amp;amp;request=GetFeature&amp;amp;typeName=&amp;quot; + selectedLayer +	&amp;quot;&amp;amp;CQL_FILTER=&amp;quot; +	CQL_filter +  &amp;quot;&amp;amp;outputFormat=application%2Fjson&amp;quot;;
    		
  fetch_search_call(query_url).catch((error) =&amp;gt; {
  CQL_filter = column_name + &amp;quot;%20&amp;quot; + &amp;quot;ILIKE&amp;quot; + &amp;quot;%20%27%25&amp;quot; + query_value + &amp;quot;%25%27&amp;quot;;
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We define a fetch_search_call function which makes a request to ows service and returns a geojson. We can parse the geojson and display it on the map.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
function fetch_search_call(query_url){

	fetch_result = fetch(query_url, {
		method: &amp;quot;GET&amp;quot;,
		headers: MyHeaders,
	  })
		.then(function (response) {
		  return response.json();
		})
		.then(function (json) {
		
				SearchvectorLayerSource.clear()
				SearchvectorLayerSource.addFeatures(
			  new ol.format.GeoJSON({
			  }).readFeatures(json)
			  );
			  if(json.features.length!=0){
			  $(&#39;#searchModal&#39;).modal(&#39;toggle&#39;);
			  }

			SearchvectorLayer.set(&#39;name&#39;,&#39;search_polygon_layer&#39;)
			map.getView().fit(SearchvectorLayerSource.getExtent(),  { duration: 1590, size: map.getSize(), padding: [10, 10, 13, 15], maxZoom:16});
			
		return fetch_result
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function queries a feature and adds it to the map as a new layer. If the search is successful, we are zoomed into that location and only the feature queried gets displayed.
If the fetch call could not find the match it returns an error which is caught by &lt;code&gt;catch&lt;/code&gt; and displays the error to the client.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/syqvzq0.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.5 -Displaying Queried layer by attribute value&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This completes the blog on how to query layer and display on the map. Visit the &lt;a href=&#34;https://github.com/amanbagrecha/openlayers-geoserver-query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github page&lt;/a&gt; to find the working application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geocoding using Mapbox API</title>
      <link>https://amanbagrecha.github.io/project/mapbox-api/</link>
      <pubDate>Thu, 08 Jul 2021 10:34:27 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/project/mapbox-api/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Geocoding using Mapbox API with Zoom-in map functionality</title>
      <link>https://amanbagrecha.github.io/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/</link>
      <pubDate>Mon, 24 May 2021 20:04:53 +0530</pubDate>
      <guid>https://amanbagrecha.github.io/post/openlayers/geocode-using-mapbox-api-with-zoom-functionality/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The big picture of this post can be related to google maps, wherein you type the address and it zooms in to the location of interest. We replicate this exact functionality with mapbox API for geocoding and openlayers for client side zoom to the address of interest.&lt;/p&gt;
&lt;h2 id=&#34;main-steps&#34;&gt;Main steps&lt;/h2&gt;
&lt;p&gt;This blog demonstrates how to geocode an address using mapbox api implemented in openlayers v6. Additionally zoom in to the search location as text provided on the search bar.
This one page appication demostrates only key elements, rest of the customisation is at discretion of the viewer.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-project&#34;&gt;Setup the project&lt;/h3&gt;
&lt;p&gt;We first create basic single html file to include all elements (javascript, css and html). Ideally, when the application scales, you would create a seperate file for each component.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;html&lt;/code&gt; file and add basic elements&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
 &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.autocomplete {
  position: relative;
  display: inline-block;
}
input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}
input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}
input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}
 &amp;lt;/style&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
&amp;lt;!--create search bar for geocoding and style it --&amp;gt;
&amp;lt;h2&amp;gt;Autocomplete&amp;lt;/h2&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;form  method=&amp;quot;post&amp;quot; &amp;gt;
  &amp;lt;div class=&amp;quot;autocomplete&amp;quot; style=&amp;quot;width:300px;&amp;quot;&amp;gt;
	&amp;lt;input id=&amp;quot;myInput&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;myCountry&amp;quot; placeholder=&amp;quot;Country&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; id = &amp;quot;geocodingSubmit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;div id=&#39;project_map&#39;, class=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	 
	 // create basemap layer
	 var project_maplayer = new ol.layer.Tile({
	// source: new ol.source.OSM(),
	source: new ol.source.XYZ({
		attributions: [&#39;Powered by Esri&#39;,
									 &#39;Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community&#39;],
		attributionsCollapsible: false,
		url: &#39;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&#39;,
		maxZoom: 23
	}),
	zIndex: 0
});

// create view for the layer
var project_view = new ol.View({
	projection: &#39;EPSG:4326&#39;,
	center: [-81.80808208706726, 27.285095000261222],
	zoom: 7,
});

// add the basemap to the map
var Projectmap = new ol.Map({
	layers: [project_maplayer,],
	target: &#39;project_map&#39;,
	view: project_view,
    constrainOnlyCenter: true,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We added the following elements,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search bar: we setup the search function to input values as address and wrap it within a form with post request.&lt;/li&gt;
&lt;li&gt;Map : the div element with &lt;code&gt;id=&amp;quot;project_map&amp;quot;&lt;/code&gt; holds the map element and the script does the following. First, create layer with ESRI basemap. Second, add the layer to the Map object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this stage the application looks like the following image&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/joNvjw7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-autocomplete-functionality&#34;&gt;Add autocomplete functionality&lt;/h2&gt;
&lt;p&gt;We fetch from the api and populate our top results in a list format on key press. Also, we style the search bar using css.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;style&amp;gt;
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
&amp;lt;/style&amp;gt;

&amp;lt;script&amp;gt;
myHeaders =  {&#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Access-Control-Allow-Credentials&#39; : true,
					&#39;Access-Control-Allow-Origin&#39;:&#39;*&#39;,
					&#39;Accept&#39;: &#39;application/json&#39;}

function autocomplete(inp) {
  /*the autocomplete function takes one argument,
  the text field element*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener(&amp;quot;input&amp;quot;, function(e) {
	  var a, b, i, val = this.value;
	  var ACCESS_TOKEN_KEY = &#39;your_token_here&#39;
	  /*close any already open lists of autocompleted values*/
	  var URL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${val}.json?access_token=${ACCESS_TOKEN_KEY}&amp;amp;types=address,region,poi,country,district,locality,neighborhood,postcode&amp;amp;country=us`
	 
	  fetch(URL,{
		method: &#39;GET&#39;,
		headers: myHeaders,
	  }).then(response =&amp;gt; response.json())
	  .then(data =&amp;gt; {
		geocode_data = data;
		// console.log(data) 
	  
	  closeAllLists();
	  if (!val) { return false;}
	  currentFocus = -1;
	  /*create a DIV element that will contain the items (values):*/
	  a = document.createElement(&amp;quot;DIV&amp;quot;);
	  a.setAttribute(&amp;quot;id&amp;quot;, this.id + &amp;quot;autocomplete-list&amp;quot;);
	  a.setAttribute(&amp;quot;class&amp;quot;, &amp;quot;autocomplete-items&amp;quot;);
	  /*append the DIV element as a child of the autocomplete container:*/
	  this.parentNode.appendChild(a);
	  /*for each item in the array...*/
	  for (i = 0; i &amp;lt; geocode_data.features.length; i++) {

		  b = document.createElement(&amp;quot;DIV&amp;quot;);
		  /*insert a input field that will hold the current array item&#39;s value:*/
		  b.innerHTML += geocode_data.features[i].place_name;
		  b.innerHTML += `&amp;lt;input type=&#39;hidden&#39; style=&amp;quot;display: none;&amp;quot; id=${i}-center-cc  
		  coordinates=&#39;${geocode_data.features[i].center}&#39; value=&#39;${geocode_data.features[i].place_name}&#39;&amp;gt;`;
		  
		  /*execute a function when someone clicks on the item value (DIV element):*/
		  b.addEventListener(&amp;quot;click&amp;quot;, function(e) {
			  /*insert the value for the autocomplete text field:*/
			  var input_tag = this.getElementsByTagName(&amp;quot;input&amp;quot;)[0]
			  inp.value = input_tag.value;
			  inp.setAttribute(&amp;quot;coordinates&amp;quot;, input_tag.getAttribute(&#39;coordinates&#39;));

			  /*close the list of autocompleted values,
			  (or any other open lists of autocompleted values:*/
			  closeAllLists();
		  });
		  a.appendChild(b);
		}

	  })
	  .catch(error =&amp;gt; {
	console.error(&#39;There has been a problem with your fetch operation:&#39;, error);
	});


	  });
  // });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener(&amp;quot;keydown&amp;quot;, function(e) {
	  var x = document.getElementById(this.id + &amp;quot;autocomplete-list&amp;quot;);
	  if (x) x = x.getElementsByTagName(&amp;quot;div&amp;quot;);
	  if (e.keyCode == 40) {
		/*If the arrow DOWN key is pressed,
		increase the currentFocus variable:*/
		currentFocus++;
		/*and and make the current item more visible:*/
		addActive(x);
	  } else if (e.keyCode == 38) { //up
		/*If the arrow UP key is pressed,
		decrease the currentFocus variable:*/
		currentFocus--;
		/*and and make the current item more visible:*/
		addActive(x);
	  } else if (e.keyCode == 13) {
		/*If the ENTER key is pressed, prevent the form from being submitted,*/
		e.preventDefault();
		if (currentFocus &amp;gt; -1) {
		  /*and simulate a click on the &amp;quot;active&amp;quot; item:*/
		  if (x) x[currentFocus].click();
		}
	  }
  });
  function addActive(x) {
	/*a function to classify an item as &amp;quot;active&amp;quot;:*/
	if (!x) return false;
	/*start by removing the &amp;quot;active&amp;quot; class on all items:*/
	removeActive(x);
	if (currentFocus &amp;gt;= x.length) currentFocus = 0;
	if (currentFocus &amp;lt; 0) currentFocus = (x.length - 1);
	/*add class &amp;quot;autocomplete-active&amp;quot;:*/
	x[currentFocus].classList.add(&amp;quot;autocomplete-active&amp;quot;);
  }
  function removeActive(x) {
	/*a function to remove the &amp;quot;active&amp;quot; class from all autocomplete items:*/
	for (var i = 0; i &amp;lt; x.length; i++) {
	  x[i].classList.remove(&amp;quot;autocomplete-active&amp;quot;);
	}
  }
  function closeAllLists(elmnt) {
	/*close all autocomplete lists in the document,
	except the one passed as an argument:*/
	var x = document.getElementsByClassName(&amp;quot;autocomplete-items&amp;quot;);
	for (var i = 0; i &amp;lt; x.length; i++) {
	  if (elmnt != x[i] &amp;amp;&amp;amp; elmnt != inp) {
		x[i].parentNode.removeChild(x[i]);
	  }
	}
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener(&amp;quot;click&amp;quot;, function (e) {
	  closeAllLists(e.target);
  });
}

/*initiate the autocomplete function on the &amp;quot;myInput&amp;quot; element */
autocomplete(document.getElementById(&amp;quot;myInput&amp;quot;));

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following is the explanation of the code&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;autocomplete function: The function takes an element as input which needs to be populated. Then we add an event listner which on change in input field, triggers. A GET request is sent across for the input typed and the result is populated in a form of dropdown. We add some styling on key-down so as to select the search.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, with correct mapbox api access key, we have built the autocomplete functionality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ES8bnSO.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;last-steps&#34;&gt;Last steps&lt;/h2&gt;
&lt;p&gt;We now only need to implement the submit functionality. On click of submit button, the address is located on the map and zoomed in. This is done using a function we call centerMap&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function CenterMap() {
	var [long, lat] = document.getElementById(&amp;quot;myInput&amp;quot;).getAttribute(&amp;quot;coordinates&amp;quot;).split(&amp;quot;,&amp;quot;).map(Number)
    console.log(&amp;quot;Long: &amp;quot; + long + &amp;quot; Lat: &amp;quot; + lat);
    Projectmap.getView().setCenter(ol.proj.transform([long, lat], &#39;EPSG:4326&#39;, &#39;EPSG:4326&#39;));
    Projectmap.getView().setZoom(5);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add the centerMap function on click of submit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.getElementById(&amp;quot;geocodingSubmit&amp;quot;).addEventListener(&#39;click&#39;, function(e){

	e.preventDefault();
	CenterMap()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The associated running application can be found &lt;a href=&#34;https://amanbagrecha.github.io/mapbox-search-functionality/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polygon Selection and  Area Calculation in Openlayers</title>
      <link>https://amanbagrecha.github.io/post/openlayers/polygon-selection-and-area-calculation-in-openlayers/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      <guid>https://amanbagrecha.github.io/post/openlayers/polygon-selection-and-area-calculation-in-openlayers/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this small demo-blog we look into how to make polygon selections on the map and calculate the area of that polygon on-the-fly. We use openlayers v6 for client side and geoserver to save our vector layers for this exercise.&lt;br&gt;
I assume readers to have familiarity with setting up geoserver and basics of openlayers.&lt;/p&gt;
&lt;h2 id=&#34;step-1-setup-openlayers&#34;&gt;&lt;strong&gt;Step 1: Setup openlayers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Openlayers requires you to add these cdns to add their functionality into our application.&lt;/p&gt;
&lt;h3 id=&#34;link-necessary-cdns&#34;&gt;link necessary cdns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
 &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using openlayers to render the request response. since the output of the WFS request is json, we create a new layer with vector source and format as geojson.
The &lt;code&gt;strategy:ol.loadingstrategy.bbox&lt;/code&gt; tells openlayers to only load features within the bbox. Simply put, if we move to different location, only features within that bbox will appear.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// setup geoserver port
var geoserver_ip = &#39;http://120.0.0.1&#39;
var geoserver_port = &#39;8080&#39;

// define vector source
var myFlSource = new ol.source.Vector({
	format: new ol.format.GeoJSON(),
		url: function (extent){
			return ( geoserver_ip +&#39;:&#39; + geoserver_port + &#39;/geoserver/dronnav/ows?service=WFS&amp;amp;version=1.1.0&amp;amp;request=GetFeature&amp;amp;typeName=dronnav%3Aflorida_bp&amp;amp;maxFeatures=10000&amp;amp;outputFormat=application/json&amp;amp;srsname=EPSG:4326&amp;amp;&#39; + &#39;bbox=&#39; + extent.join(&#39;,&#39;) + &#39;,EPSG:4326&#39; );
		},
		strategy:ol.loadingstrategy.bbox,
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We perform WFS request from geoserver to get our layer &lt;code&gt;florida_bp&lt;/code&gt; in this case. The parameters are as explained as follows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;service=WFS&lt;/code&gt; : web feature service to perform interaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;typename=workspace:florida_bp&lt;/code&gt; : specify the workspace and layer name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;version=1.1.0&lt;/code&gt; : version number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;maxFeatures = 10000&lt;/code&gt; : since WFS request is computationaly expensive, we restrict to only load 10000 features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;request=GetFeature&lt;/code&gt; : request type. There are several other which can be found here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;outputFormat=application/json&lt;/code&gt; : the output format as response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;srsname=EPSG:4326&lt;/code&gt; : coordinate reference system to display on the map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bbox=&lt;/code&gt; : bounding box&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// define vector layer
var floridaLayer = new ol.layer.Vector({
	source: myFlSource,
	style: new ol.style.Style({
		fill: new ol.style.Fill({
			color: &#39;rgba(1, 1, 255, .2)&#39;,
			}),
		stroke: new ol.style.Stroke({
			color: &#39;rgba(1, 1, 255, .5)&#39;,
			width: 2,
		}),
		}),
		minZoom: 16, // this will allows us to send request only when the zoom is atleast 16
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the layer is defined, we need to add this layer to the map. We can either use &lt;code&gt;map.addLayer(layername)&lt;/code&gt; or add to array in the map (&lt;code&gt;Fig.1&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add ESRI basemap
var project_maplayer =    new ol.layer.Tile({
	source: new ol.source.XYZ({
		attributions: [&#39;Powered by Esri&#39;,
										&#39;Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community&#39;],
		attributionsCollapsible: false,
		url: &#39;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}&#39;,
		maxZoom: 23
	}),
	zIndex: 0
});

// add view with projection set to EPSG 4326 for the map
var project_view = new ol.View({
	projection: &#39;EPSG:4326&#39;,
	center: [-81.80808208706726, 27.285095000261222],
	zoom: 7,
});

// define the map with all the layers created previously
var Projectmap = new ol.Map({
	layers: [project_maplayer, floridaLayer],
	overlays: [overlay],
	target: &#39;project_map&#39;, // the div element `id` in html page
	view: project_view,
});
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jodNbPQ.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.1 -The Map layer with building footprints (&lt;code&gt;floridaLayer&lt;/code&gt;) added to the map with the style we specified&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;get-feature-info-on-click&#34;&gt;&lt;strong&gt;Get feature info on click&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;After adding basemap and our layer to the map served via geoserver, we are now ready to get information &lt;code&gt;on-click&lt;/code&gt;. We use  &lt;code&gt;forEachFeatureAtPixel&lt;/code&gt; method on our layer to send a WFS request to our geoserver and recive a response in json format. We change the style of the building on click (&lt;code&gt;Fig.2&lt;/code&gt;). The area is calculated using formatArea function which utilises &lt;code&gt;ol.sphere.getArea&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; method to calculate area and change CRS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
  /*  select ploygon the feature and get area and store the features */
  var selected = []; // contains all features
  var selected_area = []; // contains area of feature, one-to-one
  
  Projectmap.on(&#39;singleclick&#39;, function (e) {
  Projectmap.forEachFeatureAtPixel(e.pixel, function (f, l) {
  	var mycoordinate = e.coordinate
  	storef = f  // feature
  	/* if click is on polygon, then select the feature */
  if ( f.getGeometry()   instanceof  ol.geom.MultiPolygon ) {
		  
		var selIndex = selected.indexOf(f);
			// console.log(selIndex)
		if (selIndex &amp;lt; 0) {
			selected.push(f);
			selected_area.push( formatArea(f) ); // formatArea function returns the area in ft2
			f.setStyle(highlightStyle); // change style on click
		} else {
			selected.splice(selIndex, 1);
			selected_area.splice( selIndex, 1);
			f.setStyle(undefined);
		}
 	 }

	  })

	  /* update the tags with no of selected feature and total area combined */
	  document.getElementById(&#39;status-selected&#39;).innerHTML = &#39;&amp;amp;nbsp;&#39; + selected.length + &#39; selected features&#39;;
	  document.getElementById(&#39;status-selected_area&#39;).innerHTML = &#39;&amp;amp;nbsp;&#39; + selected_area.reduce(getSum, 0) + &#39; ft&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;&#39;;
	  
	});
	

	
  /* style for selected feature on click  */
  var highlightStyle = new ol.style.Style({
  	fill: new ol.style.Fill({
  	color: &#39;#f0b88b&#39;,
  	}),
  	stroke: new ol.style.Stroke({
  	color: &#39;#f0b88b&#39;,
  	width: 3,
  	}),
  });


  /*  function for calculating area of the polygon (feature) selected */
  function formatArea (polygon){
   var area = ol.sphere.getArea(polygon.getGeometry().transform(&#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)); // transform to projected coordinate system.
   var output;
   output = Math.round(area * 100*10.7639) / 100  ; //in ft2
   polygon.getGeometry().transform(&#39;EPSG:3857&#39;, &#39;EPSG:4326&#39; ) //convert back to geographic crc
   return output;
  }
  
  /*  function for array sum */
  function getSum(total, num) {
  return total + Math.round(num);
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TCicCHu.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figcaption align = &#34;center&#34;&gt;&lt;b&gt;&lt;i&gt;Fig.2 -The &lt;code&gt;floridaLayer&lt;/code&gt; building footprints selected  with the style we specified&lt;/code&gt; for each feature&lt;/i&gt;&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;final-comments&#34;&gt;&lt;strong&gt;Final comments&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post demonstrates the use of &lt;code&gt;strategy:ol.loadingstrategy.bbox&lt;/code&gt; to load only the features that cover the bounding box. We use this strategy since WFS service is resouce intensive and our server cannot handle millions of HTTP request at once.&lt;/p&gt;
&lt;p&gt;We also see the use of &lt;code&gt;forEachFeatureAtPixel&lt;/code&gt; method to select our building footprints. On click of the feature we change the style using &lt;code&gt;setStyle&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Additionally, we saw how to change projection on-the-fly using &lt;code&gt;ol.sphere.getArea&lt;/code&gt; method. A word of caution while using &lt;code&gt;EPSG:3857&lt;/code&gt;. My AOI was on the equator and thus calculating area does not result in significant error. But if the AOI is in temperate zone then adopt suitable projection CRS.&lt;/p&gt;
&lt;p&gt;Layer Credit: Microsoft buidling footprints &lt;a href=&#34;https://github.com/microsoft/USBuildingFootprints&#34;&gt;https://github.com/microsoft/USBuildingFootprints&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
